
008Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800118c  0800118c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001230  08001230  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001230  08001230  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001230  08001230  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001230  08001230  00011230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001234  08001234  00011234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800129c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800129c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001156  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000043b  00000000  00000000  000211e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00021620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00021740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002be0  00000000  00000000  00021828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000144c  00000000  00000000  00024408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009688  00000000  00000000  00025854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002eedc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a44  00000000  00000000  0002ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001174 	.word	0x08001174

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001174 	.word	0x08001174

08000204 <delay>:
#include<stdint.h>
#include<stdio.h>

void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i =0 ; i < 300000 ; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>

}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	000493df 	.word	0x000493df

08000230 <main>:

int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
	//peripheral register addresses
	uint32_t volatile *const pGPIOCModeReg  =  (uint32_t*)(0x40020800);
 8000236:	4ba0      	ldr	r3, [pc, #640]	; (80004b8 <main+0x288>)
 8000238:	61fb      	str	r3, [r7, #28]
	uint32_t volatile *const pInPutDataReg  =  (uint32_t*)(0x40020800+0x10);
 800023a:	4ba0      	ldr	r3, [pc, #640]	; (80004bc <main+0x28c>)
 800023c:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const pOutPutDataReg =  (uint32_t*)(0x40020800+0x14);
 800023e:	4ba0      	ldr	r3, [pc, #640]	; (80004c0 <main+0x290>)
 8000240:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pClockCtrlReg  =  (uint32_t*)(0x40023800+0x30);
 8000242:	4ba0      	ldr	r3, [pc, #640]	; (80004c4 <main+0x294>)
 8000244:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pPulluPCownReg =  (uint32_t*)(0x40020800 + 0x0C);
 8000246:	4ba0      	ldr	r3, [pc, #640]	; (80004c8 <main+0x298>)
 8000248:	60fb      	str	r3, [r7, #12]
	uint32_t *AHB1ENR = (uint32_t*)0x40023830;
 800024a:	4b9e      	ldr	r3, [pc, #632]	; (80004c4 <main+0x294>)
 800024c:	60bb      	str	r3, [r7, #8]
	uint32_t *GPIOAMODE = (uint32_t*)0x40020000;
 800024e:	4b9f      	ldr	r3, [pc, #636]	; (80004cc <main+0x29c>)
 8000250:	607b      	str	r3, [r7, #4]
	uint32_t *GPIOAOUTD = (uint32_t*)0x40020014;
 8000252:	4b9f      	ldr	r3, [pc, #636]	; (80004d0 <main+0x2a0>)
 8000254:	603b      	str	r3, [r7, #0]

	//Enable GPIO Clock for GPIOA
	*AHB1ENR = *AHB1ENR | 0x01;
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0201 	orr.w	r2, r3, #1
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	601a      	str	r2, [r3, #0]

	//Mask value for clearing = 0xfffff3ff or ~(3 << 10)
	//*GPIOAMODE &= 0xfffff3ff;
	*GPIOAMODE &= ~(3 << 10);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]

	//Mask value for setting = 0x00000400 or (1 << 10)
	//*GPIOAMODE |= 0x00000400;
	*GPIOAMODE |= (1 << 10);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]

     //1.Enable the peripheral clock of GPIOC peripheral
	*pClockCtrlReg |= ( 1 << 2);
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f043 0204 	orr.w	r2, r3, #4
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	601a      	str	r2, [r3, #0]


    // 2.configure PC0,PC1,PC2,PC3 as output (rows)
	*pGPIOCModeReg &= ~(0xFF); //clear with ~11111111
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	601a      	str	r2, [r3, #0]
	*pGPIOCModeReg |= 0x55;   //set with 01010101
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800029a:	69fb      	ldr	r3, [r7, #28]
 800029c:	601a      	str	r2, [r3, #0]


	// 3. configure PC8 , PC9, PC10, PC11 as input (columns)
    *pGPIOCModeReg &= ~(0xFF << 16); // with ~11111111
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	601a      	str	r2, [r3, #0]

	// 4.Enable internal pull-up resistors for PC8 PC9 PC10 PC11
    *pPulluPCownReg &= ~(0xFF << 16); //clear with ~11111111
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
    *pPulluPCownReg |=  (0x55 << 16); //set with 01010101
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	601a      	str	r2, [r3, #0]

while(1)
{
    //make all rows HIGH
    *pOutPutDataReg |= 0x0f; // set with 1111
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 020f 	orr.w	r2, r3, #15
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	601a      	str	r2, [r3, #0]

    //make R1 LOW(PC0)
    *pOutPutDataReg &= ~( 1 << 0);
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f023 0201 	bic.w	r2, r3, #1
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PC8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d110      	bne.n	8000308 <main+0xd8>
    	//key is pressed
    	delay();
 80002e6:	f7ff ff8d 	bl	8000204 <delay>
    	printf("1\n");
 80002ea:	487a      	ldr	r0, [pc, #488]	; (80004d4 <main+0x2a4>)
 80002ec:	f000 fd4c 	bl	8000d88 <puts>
    	fflush(stdout);
 80002f0:	4b79      	ldr	r3, [pc, #484]	; (80004d8 <main+0x2a8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fac2 	bl	8000880 <fflush>
    	*GPIOAOUTD ^= (1 << 5);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f083 0220 	eor.w	r2, r3, #32
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	601a      	str	r2, [r3, #0]
    }

    //check C2(PC9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000308:	69bb      	ldr	r3, [r7, #24]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000310:	2b00      	cmp	r3, #0
 8000312:	d10a      	bne.n	800032a <main+0xfa>
    	//key is pressed
    	delay();
 8000314:	f7ff ff76 	bl	8000204 <delay>
    	printf("2\n");
 8000318:	4870      	ldr	r0, [pc, #448]	; (80004dc <main+0x2ac>)
 800031a:	f000 fd35 	bl	8000d88 <puts>
    	*GPIOAOUTD ^= (1 << 5);
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f083 0220 	eor.w	r2, r3, #32
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	601a      	str	r2, [r3, #0]
    }

    //check C3(PC10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10a      	bne.n	800034c <main+0x11c>
    	//key is pressed
    	delay();
 8000336:	f7ff ff65 	bl	8000204 <delay>
    	printf("3\n");
 800033a:	4869      	ldr	r0, [pc, #420]	; (80004e0 <main+0x2b0>)
 800033c:	f000 fd24 	bl	8000d88 <puts>
    	*GPIOAOUTD ^= (1 << 5);
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f083 0220 	eor.w	r2, r3, #32
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	601a      	str	r2, [r3, #0]
    }

    //check C4(PC11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000354:	2b00      	cmp	r3, #0
 8000356:	d104      	bne.n	8000362 <main+0x132>
    	//key is pressed
    	delay();
 8000358:	f7ff ff54 	bl	8000204 <delay>
    	printf("A\n");
 800035c:	4861      	ldr	r0, [pc, #388]	; (80004e4 <main+0x2b4>)
 800035e:	f000 fd13 	bl	8000d88 <puts>
    }


    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f043 020f 	orr.w	r2, r3, #15
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	601a      	str	r2, [r3, #0]
    //make R2 LOW(PC1)
    *pOutPutDataReg &= ~( 1 << 1);
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f023 0202 	bic.w	r2, r3, #2
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PC8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 800037a:	69bb      	ldr	r3, [r7, #24]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000382:	2b00      	cmp	r3, #0
 8000384:	d104      	bne.n	8000390 <main+0x160>
    	//key is pressed
    	delay();
 8000386:	f7ff ff3d 	bl	8000204 <delay>
    	printf("4\n");
 800038a:	4857      	ldr	r0, [pc, #348]	; (80004e8 <main+0x2b8>)
 800038c:	f000 fcfc 	bl	8000d88 <puts>
    }

    //check C2(PC9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000390:	69bb      	ldr	r3, [r7, #24]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000398:	2b00      	cmp	r3, #0
 800039a:	d104      	bne.n	80003a6 <main+0x176>
    	//key is pressed
    	delay();
 800039c:	f7ff ff32 	bl	8000204 <delay>
    	printf("5\n");
 80003a0:	4852      	ldr	r0, [pc, #328]	; (80004ec <main+0x2bc>)
 80003a2:	f000 fcf1 	bl	8000d88 <puts>
    }

    //check C3(PC10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 80003a6:	69bb      	ldr	r3, [r7, #24]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d104      	bne.n	80003bc <main+0x18c>
    	//key is pressed
    	delay();
 80003b2:	f7ff ff27 	bl	8000204 <delay>
    	printf("6\n");
 80003b6:	484e      	ldr	r0, [pc, #312]	; (80004f0 <main+0x2c0>)
 80003b8:	f000 fce6 	bl	8000d88 <puts>
    }

    //check C4(PC11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d104      	bne.n	80003d2 <main+0x1a2>
    	//key is pressed
    	delay();
 80003c8:	f7ff ff1c 	bl	8000204 <delay>
    	printf("B\n");
 80003cc:	4849      	ldr	r0, [pc, #292]	; (80004f4 <main+0x2c4>)
 80003ce:	f000 fcdb 	bl	8000d88 <puts>
    }

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f043 020f 	orr.w	r2, r3, #15
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	601a      	str	r2, [r3, #0]
    //make R3 LOW(PC2)
    *pOutPutDataReg &= ~( 1 << 2);
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f023 0204 	bic.w	r2, r3, #4
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PC8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 80003ea:	69bb      	ldr	r3, [r7, #24]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d104      	bne.n	8000400 <main+0x1d0>
    	//key is pressed
    	delay();
 80003f6:	f7ff ff05 	bl	8000204 <delay>
    	printf("7\n");
 80003fa:	483f      	ldr	r0, [pc, #252]	; (80004f8 <main+0x2c8>)
 80003fc:	f000 fcc4 	bl	8000d88 <puts>
    }

    //check C2(PC9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000400:	69bb      	ldr	r3, [r7, #24]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000408:	2b00      	cmp	r3, #0
 800040a:	d104      	bne.n	8000416 <main+0x1e6>
    	//key is pressed
    	delay();
 800040c:	f7ff fefa 	bl	8000204 <delay>
    	printf("8\n");
 8000410:	483a      	ldr	r0, [pc, #232]	; (80004fc <main+0x2cc>)
 8000412:	f000 fcb9 	bl	8000d88 <puts>
    }

    //check C3(PC10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800041e:	2b00      	cmp	r3, #0
 8000420:	d104      	bne.n	800042c <main+0x1fc>
    	//key is pressed
    	delay();
 8000422:	f7ff feef 	bl	8000204 <delay>
    	printf("9\n");
 8000426:	4836      	ldr	r0, [pc, #216]	; (8000500 <main+0x2d0>)
 8000428:	f000 fcae 	bl	8000d88 <puts>
    }

    //check C4(PC11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000434:	2b00      	cmp	r3, #0
 8000436:	d104      	bne.n	8000442 <main+0x212>
    	//key is pressed
    	delay();
 8000438:	f7ff fee4 	bl	8000204 <delay>
    	printf("C\n");
 800043c:	4831      	ldr	r0, [pc, #196]	; (8000504 <main+0x2d4>)
 800043e:	f000 fca3 	bl	8000d88 <puts>
    }

    //make all rows HIGH
     *pOutPutDataReg |= 0x0f;
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 020f 	orr.w	r2, r3, #15
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	601a      	str	r2, [r3, #0]
    //make R4 LOW(PC2)
    *pOutPutDataReg &= ~( 1 << 3);
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f023 0208 	bic.w	r2, r3, #8
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PC8) low or high
    if(!(*pInPutDataReg & ( 1 << 8))){
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000462:	2b00      	cmp	r3, #0
 8000464:	d104      	bne.n	8000470 <main+0x240>
    	//key is pressed
    	delay();
 8000466:	f7ff fecd 	bl	8000204 <delay>
    	printf("*\n");
 800046a:	4827      	ldr	r0, [pc, #156]	; (8000508 <main+0x2d8>)
 800046c:	f000 fc8c 	bl	8000d88 <puts>
    }

    //check C2(PC9) low or high
    if(!(*pInPutDataReg & ( 1 << 9))){
 8000470:	69bb      	ldr	r3, [r7, #24]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000478:	2b00      	cmp	r3, #0
 800047a:	d104      	bne.n	8000486 <main+0x256>
    	//key is pressed
    	delay();
 800047c:	f7ff fec2 	bl	8000204 <delay>
    	printf("0\n");
 8000480:	4822      	ldr	r0, [pc, #136]	; (800050c <main+0x2dc>)
 8000482:	f000 fc81 	bl	8000d88 <puts>
    }

    //check C3(PC10) low or high
    if(!(*pInPutDataReg & ( 1 << 10))){
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800048e:	2b00      	cmp	r3, #0
 8000490:	d104      	bne.n	800049c <main+0x26c>
    	//key is pressed
    	delay();
 8000492:	f7ff feb7 	bl	8000204 <delay>
    	printf("#\n");
 8000496:	481e      	ldr	r0, [pc, #120]	; (8000510 <main+0x2e0>)
 8000498:	f000 fc76 	bl	8000d88 <puts>
    }

    //check C4(PC11) low or high
    if(!(*pInPutDataReg & ( 1 << 11))){
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	f47f af0c 	bne.w	80002c2 <main+0x92>
    	//key is pressed
    	delay();
 80004aa:	f7ff feab 	bl	8000204 <delay>
    	printf("D\n");
 80004ae:	4819      	ldr	r0, [pc, #100]	; (8000514 <main+0x2e4>)
 80004b0:	f000 fc6a 	bl	8000d88 <puts>
    *pOutPutDataReg |= 0x0f; // set with 1111
 80004b4:	e705      	b.n	80002c2 <main+0x92>
 80004b6:	bf00      	nop
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40020810 	.word	0x40020810
 80004c0:	40020814 	.word	0x40020814
 80004c4:	40023830 	.word	0x40023830
 80004c8:	4002080c 	.word	0x4002080c
 80004cc:	40020000 	.word	0x40020000
 80004d0:	40020014 	.word	0x40020014
 80004d4:	0800118c 	.word	0x0800118c
 80004d8:	20000000 	.word	0x20000000
 80004dc:	08001190 	.word	0x08001190
 80004e0:	08001194 	.word	0x08001194
 80004e4:	08001198 	.word	0x08001198
 80004e8:	0800119c 	.word	0x0800119c
 80004ec:	080011a0 	.word	0x080011a0
 80004f0:	080011a4 	.word	0x080011a4
 80004f4:	080011a8 	.word	0x080011a8
 80004f8:	080011ac 	.word	0x080011ac
 80004fc:	080011b0 	.word	0x080011b0
 8000500:	080011b4 	.word	0x080011b4
 8000504:	080011b8 	.word	0x080011b8
 8000508:	080011bc 	.word	0x080011bc
 800050c:	080011c0 	.word	0x080011c0
 8000510:	080011c4 	.word	0x080011c4
 8000514:	080011c8 	.word	0x080011c8

08000518 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <ITM_SendChar+0x44>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a0d      	ldr	r2, [pc, #52]	; (800055c <ITM_SendChar+0x44>)
 8000528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800052c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <ITM_SendChar+0x48>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <ITM_SendChar+0x48>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800053a:	bf00      	nop
 800053c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0f8      	beq.n	800053c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800054a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	6013      	str	r3, [r2, #0]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	e000edfc 	.word	0xe000edfc
 8000560:	e0000e00 	.word	0xe0000e00

08000564 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	e00a      	b.n	800058c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000576:	f3af 8000 	nop.w
 800057a:	4601      	mov	r1, r0
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	60ba      	str	r2, [r7, #8]
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf0      	blt.n	8000576 <_read+0x12>
  }

  return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b086      	sub	sp, #24
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e009      	b.n	80005c4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	60ba      	str	r2, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffad 	bl	8000518 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbf1      	blt.n	80005b0 <_write+0x12>
  }
  return len;
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <_close>:

int _close(int file)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fc:	605a      	str	r2, [r3, #4]
  return 0;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <_isatty>:

int _isatty(int file)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
	...

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f000 f846 	bl	80006f8 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20020000 	.word	0x20020000
 8000698:	00000400 	.word	0x00000400
 800069c:	20000080 	.word	0x20000080
 80006a0:	20000098 	.word	0x20000098

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d2:	f000 f9dd 	bl	8000a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fdab 	bl	8000230 <main>

080006da <LoopForever>:

LoopForever:
  b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006e8:	08001238 	.word	0x08001238
  ldr r2, =_sbss
 80006ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006f0:	20000094 	.word	0x20000094

080006f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC_IRQHandler>
	...

080006f8 <__errno>:
 80006f8:	4b01      	ldr	r3, [pc, #4]	; (8000700 <__errno+0x8>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000

08000704 <__sflush_r>:
 8000704:	898a      	ldrh	r2, [r1, #12]
 8000706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000708:	4605      	mov	r5, r0
 800070a:	0710      	lsls	r0, r2, #28
 800070c:	460c      	mov	r4, r1
 800070e:	d457      	bmi.n	80007c0 <__sflush_r+0xbc>
 8000710:	684b      	ldr	r3, [r1, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	dc04      	bgt.n	8000720 <__sflush_r+0x1c>
 8000716:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000718:	2b00      	cmp	r3, #0
 800071a:	dc01      	bgt.n	8000720 <__sflush_r+0x1c>
 800071c:	2000      	movs	r0, #0
 800071e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000722:	2e00      	cmp	r6, #0
 8000724:	d0fa      	beq.n	800071c <__sflush_r+0x18>
 8000726:	2300      	movs	r3, #0
 8000728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800072c:	682f      	ldr	r7, [r5, #0]
 800072e:	602b      	str	r3, [r5, #0]
 8000730:	d032      	beq.n	8000798 <__sflush_r+0x94>
 8000732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000734:	89a3      	ldrh	r3, [r4, #12]
 8000736:	075a      	lsls	r2, r3, #29
 8000738:	d505      	bpl.n	8000746 <__sflush_r+0x42>
 800073a:	6863      	ldr	r3, [r4, #4]
 800073c:	1ac0      	subs	r0, r0, r3
 800073e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000740:	b10b      	cbz	r3, 8000746 <__sflush_r+0x42>
 8000742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000744:	1ac0      	subs	r0, r0, r3
 8000746:	2300      	movs	r3, #0
 8000748:	4602      	mov	r2, r0
 800074a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800074c:	6a21      	ldr	r1, [r4, #32]
 800074e:	4628      	mov	r0, r5
 8000750:	47b0      	blx	r6
 8000752:	1c43      	adds	r3, r0, #1
 8000754:	89a3      	ldrh	r3, [r4, #12]
 8000756:	d106      	bne.n	8000766 <__sflush_r+0x62>
 8000758:	6829      	ldr	r1, [r5, #0]
 800075a:	291d      	cmp	r1, #29
 800075c:	d82c      	bhi.n	80007b8 <__sflush_r+0xb4>
 800075e:	4a29      	ldr	r2, [pc, #164]	; (8000804 <__sflush_r+0x100>)
 8000760:	40ca      	lsrs	r2, r1
 8000762:	07d6      	lsls	r6, r2, #31
 8000764:	d528      	bpl.n	80007b8 <__sflush_r+0xb4>
 8000766:	2200      	movs	r2, #0
 8000768:	6062      	str	r2, [r4, #4]
 800076a:	04d9      	lsls	r1, r3, #19
 800076c:	6922      	ldr	r2, [r4, #16]
 800076e:	6022      	str	r2, [r4, #0]
 8000770:	d504      	bpl.n	800077c <__sflush_r+0x78>
 8000772:	1c42      	adds	r2, r0, #1
 8000774:	d101      	bne.n	800077a <__sflush_r+0x76>
 8000776:	682b      	ldr	r3, [r5, #0]
 8000778:	b903      	cbnz	r3, 800077c <__sflush_r+0x78>
 800077a:	6560      	str	r0, [r4, #84]	; 0x54
 800077c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800077e:	602f      	str	r7, [r5, #0]
 8000780:	2900      	cmp	r1, #0
 8000782:	d0cb      	beq.n	800071c <__sflush_r+0x18>
 8000784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000788:	4299      	cmp	r1, r3
 800078a:	d002      	beq.n	8000792 <__sflush_r+0x8e>
 800078c:	4628      	mov	r0, r5
 800078e:	f000 f9af 	bl	8000af0 <_free_r>
 8000792:	2000      	movs	r0, #0
 8000794:	6360      	str	r0, [r4, #52]	; 0x34
 8000796:	e7c2      	b.n	800071e <__sflush_r+0x1a>
 8000798:	6a21      	ldr	r1, [r4, #32]
 800079a:	2301      	movs	r3, #1
 800079c:	4628      	mov	r0, r5
 800079e:	47b0      	blx	r6
 80007a0:	1c41      	adds	r1, r0, #1
 80007a2:	d1c7      	bne.n	8000734 <__sflush_r+0x30>
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0c4      	beq.n	8000734 <__sflush_r+0x30>
 80007aa:	2b1d      	cmp	r3, #29
 80007ac:	d001      	beq.n	80007b2 <__sflush_r+0xae>
 80007ae:	2b16      	cmp	r3, #22
 80007b0:	d101      	bne.n	80007b6 <__sflush_r+0xb2>
 80007b2:	602f      	str	r7, [r5, #0]
 80007b4:	e7b2      	b.n	800071c <__sflush_r+0x18>
 80007b6:	89a3      	ldrh	r3, [r4, #12]
 80007b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007bc:	81a3      	strh	r3, [r4, #12]
 80007be:	e7ae      	b.n	800071e <__sflush_r+0x1a>
 80007c0:	690f      	ldr	r7, [r1, #16]
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d0aa      	beq.n	800071c <__sflush_r+0x18>
 80007c6:	0793      	lsls	r3, r2, #30
 80007c8:	680e      	ldr	r6, [r1, #0]
 80007ca:	bf08      	it	eq
 80007cc:	694b      	ldreq	r3, [r1, #20]
 80007ce:	600f      	str	r7, [r1, #0]
 80007d0:	bf18      	it	ne
 80007d2:	2300      	movne	r3, #0
 80007d4:	1bf6      	subs	r6, r6, r7
 80007d6:	608b      	str	r3, [r1, #8]
 80007d8:	2e00      	cmp	r6, #0
 80007da:	dd9f      	ble.n	800071c <__sflush_r+0x18>
 80007dc:	6a21      	ldr	r1, [r4, #32]
 80007de:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80007e2:	4633      	mov	r3, r6
 80007e4:	463a      	mov	r2, r7
 80007e6:	4628      	mov	r0, r5
 80007e8:	47e0      	blx	ip
 80007ea:	2800      	cmp	r0, #0
 80007ec:	dc06      	bgt.n	80007fc <__sflush_r+0xf8>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	81a3      	strh	r3, [r4, #12]
 80007f6:	f04f 30ff 	mov.w	r0, #4294967295
 80007fa:	e790      	b.n	800071e <__sflush_r+0x1a>
 80007fc:	4407      	add	r7, r0
 80007fe:	1a36      	subs	r6, r6, r0
 8000800:	e7ea      	b.n	80007d8 <__sflush_r+0xd4>
 8000802:	bf00      	nop
 8000804:	20400001 	.word	0x20400001

08000808 <_fflush_r>:
 8000808:	b538      	push	{r3, r4, r5, lr}
 800080a:	690b      	ldr	r3, [r1, #16]
 800080c:	4605      	mov	r5, r0
 800080e:	460c      	mov	r4, r1
 8000810:	b913      	cbnz	r3, 8000818 <_fflush_r+0x10>
 8000812:	2500      	movs	r5, #0
 8000814:	4628      	mov	r0, r5
 8000816:	bd38      	pop	{r3, r4, r5, pc}
 8000818:	b118      	cbz	r0, 8000822 <_fflush_r+0x1a>
 800081a:	6983      	ldr	r3, [r0, #24]
 800081c:	b90b      	cbnz	r3, 8000822 <_fflush_r+0x1a>
 800081e:	f000 f899 	bl	8000954 <__sinit>
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <_fflush_r+0x6c>)
 8000824:	429c      	cmp	r4, r3
 8000826:	d11b      	bne.n	8000860 <_fflush_r+0x58>
 8000828:	686c      	ldr	r4, [r5, #4]
 800082a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0ef      	beq.n	8000812 <_fflush_r+0xa>
 8000832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000834:	07d0      	lsls	r0, r2, #31
 8000836:	d404      	bmi.n	8000842 <_fflush_r+0x3a>
 8000838:	0599      	lsls	r1, r3, #22
 800083a:	d402      	bmi.n	8000842 <_fflush_r+0x3a>
 800083c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800083e:	f000 f94c 	bl	8000ada <__retarget_lock_acquire_recursive>
 8000842:	4628      	mov	r0, r5
 8000844:	4621      	mov	r1, r4
 8000846:	f7ff ff5d 	bl	8000704 <__sflush_r>
 800084a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800084c:	07da      	lsls	r2, r3, #31
 800084e:	4605      	mov	r5, r0
 8000850:	d4e0      	bmi.n	8000814 <_fflush_r+0xc>
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	059b      	lsls	r3, r3, #22
 8000856:	d4dd      	bmi.n	8000814 <_fflush_r+0xc>
 8000858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800085a:	f000 f93f 	bl	8000adc <__retarget_lock_release_recursive>
 800085e:	e7d9      	b.n	8000814 <_fflush_r+0xc>
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <_fflush_r+0x70>)
 8000862:	429c      	cmp	r4, r3
 8000864:	d101      	bne.n	800086a <_fflush_r+0x62>
 8000866:	68ac      	ldr	r4, [r5, #8]
 8000868:	e7df      	b.n	800082a <_fflush_r+0x22>
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <_fflush_r+0x74>)
 800086c:	429c      	cmp	r4, r3
 800086e:	bf08      	it	eq
 8000870:	68ec      	ldreq	r4, [r5, #12]
 8000872:	e7da      	b.n	800082a <_fflush_r+0x22>
 8000874:	080011ec 	.word	0x080011ec
 8000878:	0800120c 	.word	0x0800120c
 800087c:	080011cc 	.word	0x080011cc

08000880 <fflush>:
 8000880:	4601      	mov	r1, r0
 8000882:	b920      	cbnz	r0, 800088e <fflush+0xe>
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <fflush+0x18>)
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <fflush+0x1c>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f000 b8e1 	b.w	8000a50 <_fwalk_reent>
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <fflush+0x20>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	f7ff bfb9 	b.w	8000808 <_fflush_r>
 8000896:	bf00      	nop
 8000898:	0800122c 	.word	0x0800122c
 800089c:	08000809 	.word	0x08000809
 80008a0:	20000000 	.word	0x20000000

080008a4 <std>:
 80008a4:	2300      	movs	r3, #0
 80008a6:	b510      	push	{r4, lr}
 80008a8:	4604      	mov	r4, r0
 80008aa:	e9c0 3300 	strd	r3, r3, [r0]
 80008ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008b2:	6083      	str	r3, [r0, #8]
 80008b4:	8181      	strh	r1, [r0, #12]
 80008b6:	6643      	str	r3, [r0, #100]	; 0x64
 80008b8:	81c2      	strh	r2, [r0, #14]
 80008ba:	6183      	str	r3, [r0, #24]
 80008bc:	4619      	mov	r1, r3
 80008be:	2208      	movs	r2, #8
 80008c0:	305c      	adds	r0, #92	; 0x5c
 80008c2:	f000 f90c 	bl	8000ade <memset>
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <std+0x38>)
 80008c8:	6263      	str	r3, [r4, #36]	; 0x24
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <std+0x3c>)
 80008cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <std+0x40>)
 80008d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <std+0x44>)
 80008d4:	6224      	str	r4, [r4, #32]
 80008d6:	6323      	str	r3, [r4, #48]	; 0x30
 80008d8:	bd10      	pop	{r4, pc}
 80008da:	bf00      	nop
 80008dc:	08000db9 	.word	0x08000db9
 80008e0:	08000ddb 	.word	0x08000ddb
 80008e4:	08000e13 	.word	0x08000e13
 80008e8:	08000e37 	.word	0x08000e37

080008ec <_cleanup_r>:
 80008ec:	4901      	ldr	r1, [pc, #4]	; (80008f4 <_cleanup_r+0x8>)
 80008ee:	f000 b8af 	b.w	8000a50 <_fwalk_reent>
 80008f2:	bf00      	nop
 80008f4:	08000809 	.word	0x08000809

080008f8 <__sfmoreglue>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	2268      	movs	r2, #104	; 0x68
 80008fc:	1e4d      	subs	r5, r1, #1
 80008fe:	4355      	muls	r5, r2
 8000900:	460e      	mov	r6, r1
 8000902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000906:	f000 f95d 	bl	8000bc4 <_malloc_r>
 800090a:	4604      	mov	r4, r0
 800090c:	b140      	cbz	r0, 8000920 <__sfmoreglue+0x28>
 800090e:	2100      	movs	r1, #0
 8000910:	e9c0 1600 	strd	r1, r6, [r0]
 8000914:	300c      	adds	r0, #12
 8000916:	60a0      	str	r0, [r4, #8]
 8000918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800091c:	f000 f8df 	bl	8000ade <memset>
 8000920:	4620      	mov	r0, r4
 8000922:	bd70      	pop	{r4, r5, r6, pc}

08000924 <__sfp_lock_acquire>:
 8000924:	4801      	ldr	r0, [pc, #4]	; (800092c <__sfp_lock_acquire+0x8>)
 8000926:	f000 b8d8 	b.w	8000ada <__retarget_lock_acquire_recursive>
 800092a:	bf00      	nop
 800092c:	20000085 	.word	0x20000085

08000930 <__sfp_lock_release>:
 8000930:	4801      	ldr	r0, [pc, #4]	; (8000938 <__sfp_lock_release+0x8>)
 8000932:	f000 b8d3 	b.w	8000adc <__retarget_lock_release_recursive>
 8000936:	bf00      	nop
 8000938:	20000085 	.word	0x20000085

0800093c <__sinit_lock_acquire>:
 800093c:	4801      	ldr	r0, [pc, #4]	; (8000944 <__sinit_lock_acquire+0x8>)
 800093e:	f000 b8cc 	b.w	8000ada <__retarget_lock_acquire_recursive>
 8000942:	bf00      	nop
 8000944:	20000086 	.word	0x20000086

08000948 <__sinit_lock_release>:
 8000948:	4801      	ldr	r0, [pc, #4]	; (8000950 <__sinit_lock_release+0x8>)
 800094a:	f000 b8c7 	b.w	8000adc <__retarget_lock_release_recursive>
 800094e:	bf00      	nop
 8000950:	20000086 	.word	0x20000086

08000954 <__sinit>:
 8000954:	b510      	push	{r4, lr}
 8000956:	4604      	mov	r4, r0
 8000958:	f7ff fff0 	bl	800093c <__sinit_lock_acquire>
 800095c:	69a3      	ldr	r3, [r4, #24]
 800095e:	b11b      	cbz	r3, 8000968 <__sinit+0x14>
 8000960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000964:	f7ff bff0 	b.w	8000948 <__sinit_lock_release>
 8000968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800096c:	6523      	str	r3, [r4, #80]	; 0x50
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <__sinit+0x68>)
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <__sinit+0x6c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	62a2      	str	r2, [r4, #40]	; 0x28
 8000976:	42a3      	cmp	r3, r4
 8000978:	bf04      	itt	eq
 800097a:	2301      	moveq	r3, #1
 800097c:	61a3      	streq	r3, [r4, #24]
 800097e:	4620      	mov	r0, r4
 8000980:	f000 f820 	bl	80009c4 <__sfp>
 8000984:	6060      	str	r0, [r4, #4]
 8000986:	4620      	mov	r0, r4
 8000988:	f000 f81c 	bl	80009c4 <__sfp>
 800098c:	60a0      	str	r0, [r4, #8]
 800098e:	4620      	mov	r0, r4
 8000990:	f000 f818 	bl	80009c4 <__sfp>
 8000994:	2200      	movs	r2, #0
 8000996:	60e0      	str	r0, [r4, #12]
 8000998:	2104      	movs	r1, #4
 800099a:	6860      	ldr	r0, [r4, #4]
 800099c:	f7ff ff82 	bl	80008a4 <std>
 80009a0:	68a0      	ldr	r0, [r4, #8]
 80009a2:	2201      	movs	r2, #1
 80009a4:	2109      	movs	r1, #9
 80009a6:	f7ff ff7d 	bl	80008a4 <std>
 80009aa:	68e0      	ldr	r0, [r4, #12]
 80009ac:	2202      	movs	r2, #2
 80009ae:	2112      	movs	r1, #18
 80009b0:	f7ff ff78 	bl	80008a4 <std>
 80009b4:	2301      	movs	r3, #1
 80009b6:	61a3      	str	r3, [r4, #24]
 80009b8:	e7d2      	b.n	8000960 <__sinit+0xc>
 80009ba:	bf00      	nop
 80009bc:	0800122c 	.word	0x0800122c
 80009c0:	080008ed 	.word	0x080008ed

080009c4 <__sfp>:
 80009c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c6:	4607      	mov	r7, r0
 80009c8:	f7ff ffac 	bl	8000924 <__sfp_lock_acquire>
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <__sfp+0x84>)
 80009ce:	681e      	ldr	r6, [r3, #0]
 80009d0:	69b3      	ldr	r3, [r6, #24]
 80009d2:	b913      	cbnz	r3, 80009da <__sfp+0x16>
 80009d4:	4630      	mov	r0, r6
 80009d6:	f7ff ffbd 	bl	8000954 <__sinit>
 80009da:	3648      	adds	r6, #72	; 0x48
 80009dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	d503      	bpl.n	80009ec <__sfp+0x28>
 80009e4:	6833      	ldr	r3, [r6, #0]
 80009e6:	b30b      	cbz	r3, 8000a2c <__sfp+0x68>
 80009e8:	6836      	ldr	r6, [r6, #0]
 80009ea:	e7f7      	b.n	80009dc <__sfp+0x18>
 80009ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009f0:	b9d5      	cbnz	r5, 8000a28 <__sfp+0x64>
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <__sfp+0x88>)
 80009f4:	60e3      	str	r3, [r4, #12]
 80009f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009fa:	6665      	str	r5, [r4, #100]	; 0x64
 80009fc:	f000 f86c 	bl	8000ad8 <__retarget_lock_init_recursive>
 8000a00:	f7ff ff96 	bl	8000930 <__sfp_lock_release>
 8000a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a0c:	6025      	str	r5, [r4, #0]
 8000a0e:	61a5      	str	r5, [r4, #24]
 8000a10:	2208      	movs	r2, #8
 8000a12:	4629      	mov	r1, r5
 8000a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a18:	f000 f861 	bl	8000ade <memset>
 8000a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a24:	4620      	mov	r0, r4
 8000a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a28:	3468      	adds	r4, #104	; 0x68
 8000a2a:	e7d9      	b.n	80009e0 <__sfp+0x1c>
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4638      	mov	r0, r7
 8000a30:	f7ff ff62 	bl	80008f8 <__sfmoreglue>
 8000a34:	4604      	mov	r4, r0
 8000a36:	6030      	str	r0, [r6, #0]
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d1d5      	bne.n	80009e8 <__sfp+0x24>
 8000a3c:	f7ff ff78 	bl	8000930 <__sfp_lock_release>
 8000a40:	230c      	movs	r3, #12
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	e7ee      	b.n	8000a24 <__sfp+0x60>
 8000a46:	bf00      	nop
 8000a48:	0800122c 	.word	0x0800122c
 8000a4c:	ffff0001 	.word	0xffff0001

08000a50 <_fwalk_reent>:
 8000a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a54:	4606      	mov	r6, r0
 8000a56:	4688      	mov	r8, r1
 8000a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a5c:	2700      	movs	r7, #0
 8000a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a62:	f1b9 0901 	subs.w	r9, r9, #1
 8000a66:	d505      	bpl.n	8000a74 <_fwalk_reent+0x24>
 8000a68:	6824      	ldr	r4, [r4, #0]
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d1f7      	bne.n	8000a5e <_fwalk_reent+0xe>
 8000a6e:	4638      	mov	r0, r7
 8000a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a74:	89ab      	ldrh	r3, [r5, #12]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d907      	bls.n	8000a8a <_fwalk_reent+0x3a>
 8000a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	d003      	beq.n	8000a8a <_fwalk_reent+0x3a>
 8000a82:	4629      	mov	r1, r5
 8000a84:	4630      	mov	r0, r6
 8000a86:	47c0      	blx	r8
 8000a88:	4307      	orrs	r7, r0
 8000a8a:	3568      	adds	r5, #104	; 0x68
 8000a8c:	e7e9      	b.n	8000a62 <_fwalk_reent+0x12>
	...

08000a90 <__libc_init_array>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4d0d      	ldr	r5, [pc, #52]	; (8000ac8 <__libc_init_array+0x38>)
 8000a94:	4c0d      	ldr	r4, [pc, #52]	; (8000acc <__libc_init_array+0x3c>)
 8000a96:	1b64      	subs	r4, r4, r5
 8000a98:	10a4      	asrs	r4, r4, #2
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	42a6      	cmp	r6, r4
 8000a9e:	d109      	bne.n	8000ab4 <__libc_init_array+0x24>
 8000aa0:	4d0b      	ldr	r5, [pc, #44]	; (8000ad0 <__libc_init_array+0x40>)
 8000aa2:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <__libc_init_array+0x44>)
 8000aa4:	f000 fb66 	bl	8001174 <_init>
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	2600      	movs	r6, #0
 8000aae:	42a6      	cmp	r6, r4
 8000ab0:	d105      	bne.n	8000abe <__libc_init_array+0x2e>
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab8:	4798      	blx	r3
 8000aba:	3601      	adds	r6, #1
 8000abc:	e7ee      	b.n	8000a9c <__libc_init_array+0xc>
 8000abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac2:	4798      	blx	r3
 8000ac4:	3601      	adds	r6, #1
 8000ac6:	e7f2      	b.n	8000aae <__libc_init_array+0x1e>
 8000ac8:	08001230 	.word	0x08001230
 8000acc:	08001230 	.word	0x08001230
 8000ad0:	08001230 	.word	0x08001230
 8000ad4:	08001234 	.word	0x08001234

08000ad8 <__retarget_lock_init_recursive>:
 8000ad8:	4770      	bx	lr

08000ada <__retarget_lock_acquire_recursive>:
 8000ada:	4770      	bx	lr

08000adc <__retarget_lock_release_recursive>:
 8000adc:	4770      	bx	lr

08000ade <memset>:
 8000ade:	4402      	add	r2, r0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d100      	bne.n	8000ae8 <memset+0xa>
 8000ae6:	4770      	bx	lr
 8000ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8000aec:	e7f9      	b.n	8000ae2 <memset+0x4>
	...

08000af0 <_free_r>:
 8000af0:	b538      	push	{r3, r4, r5, lr}
 8000af2:	4605      	mov	r5, r0
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d041      	beq.n	8000b7c <_free_r+0x8c>
 8000af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000afc:	1f0c      	subs	r4, r1, #4
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bfb8      	it	lt
 8000b02:	18e4      	addlt	r4, r4, r3
 8000b04:	f000 faf6 	bl	80010f4 <__malloc_lock>
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <_free_r+0x90>)
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	b933      	cbnz	r3, 8000b1c <_free_r+0x2c>
 8000b0e:	6063      	str	r3, [r4, #4]
 8000b10:	6014      	str	r4, [r2, #0]
 8000b12:	4628      	mov	r0, r5
 8000b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b18:	f000 baf2 	b.w	8001100 <__malloc_unlock>
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <_free_r+0x42>
 8000b20:	6820      	ldr	r0, [r4, #0]
 8000b22:	1821      	adds	r1, r4, r0
 8000b24:	428b      	cmp	r3, r1
 8000b26:	bf01      	itttt	eq
 8000b28:	6819      	ldreq	r1, [r3, #0]
 8000b2a:	685b      	ldreq	r3, [r3, #4]
 8000b2c:	1809      	addeq	r1, r1, r0
 8000b2e:	6021      	streq	r1, [r4, #0]
 8000b30:	e7ed      	b.n	8000b0e <_free_r+0x1e>
 8000b32:	461a      	mov	r2, r3
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	b10b      	cbz	r3, 8000b3c <_free_r+0x4c>
 8000b38:	42a3      	cmp	r3, r4
 8000b3a:	d9fa      	bls.n	8000b32 <_free_r+0x42>
 8000b3c:	6811      	ldr	r1, [r2, #0]
 8000b3e:	1850      	adds	r0, r2, r1
 8000b40:	42a0      	cmp	r0, r4
 8000b42:	d10b      	bne.n	8000b5c <_free_r+0x6c>
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	4401      	add	r1, r0
 8000b48:	1850      	adds	r0, r2, r1
 8000b4a:	4283      	cmp	r3, r0
 8000b4c:	6011      	str	r1, [r2, #0]
 8000b4e:	d1e0      	bne.n	8000b12 <_free_r+0x22>
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	6053      	str	r3, [r2, #4]
 8000b56:	4401      	add	r1, r0
 8000b58:	6011      	str	r1, [r2, #0]
 8000b5a:	e7da      	b.n	8000b12 <_free_r+0x22>
 8000b5c:	d902      	bls.n	8000b64 <_free_r+0x74>
 8000b5e:	230c      	movs	r3, #12
 8000b60:	602b      	str	r3, [r5, #0]
 8000b62:	e7d6      	b.n	8000b12 <_free_r+0x22>
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	1821      	adds	r1, r4, r0
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	bf04      	itt	eq
 8000b6c:	6819      	ldreq	r1, [r3, #0]
 8000b6e:	685b      	ldreq	r3, [r3, #4]
 8000b70:	6063      	str	r3, [r4, #4]
 8000b72:	bf04      	itt	eq
 8000b74:	1809      	addeq	r1, r1, r0
 8000b76:	6021      	streq	r1, [r4, #0]
 8000b78:	6054      	str	r4, [r2, #4]
 8000b7a:	e7ca      	b.n	8000b12 <_free_r+0x22>
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000088 	.word	0x20000088

08000b84 <sbrk_aligned>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	4e0e      	ldr	r6, [pc, #56]	; (8000bc0 <sbrk_aligned+0x3c>)
 8000b88:	460c      	mov	r4, r1
 8000b8a:	6831      	ldr	r1, [r6, #0]
 8000b8c:	4605      	mov	r5, r0
 8000b8e:	b911      	cbnz	r1, 8000b96 <sbrk_aligned+0x12>
 8000b90:	f000 f902 	bl	8000d98 <_sbrk_r>
 8000b94:	6030      	str	r0, [r6, #0]
 8000b96:	4621      	mov	r1, r4
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f000 f8fd 	bl	8000d98 <_sbrk_r>
 8000b9e:	1c43      	adds	r3, r0, #1
 8000ba0:	d00a      	beq.n	8000bb8 <sbrk_aligned+0x34>
 8000ba2:	1cc4      	adds	r4, r0, #3
 8000ba4:	f024 0403 	bic.w	r4, r4, #3
 8000ba8:	42a0      	cmp	r0, r4
 8000baa:	d007      	beq.n	8000bbc <sbrk_aligned+0x38>
 8000bac:	1a21      	subs	r1, r4, r0
 8000bae:	4628      	mov	r0, r5
 8000bb0:	f000 f8f2 	bl	8000d98 <_sbrk_r>
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	d101      	bne.n	8000bbc <sbrk_aligned+0x38>
 8000bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	2000008c 	.word	0x2000008c

08000bc4 <_malloc_r>:
 8000bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc8:	1ccd      	adds	r5, r1, #3
 8000bca:	f025 0503 	bic.w	r5, r5, #3
 8000bce:	3508      	adds	r5, #8
 8000bd0:	2d0c      	cmp	r5, #12
 8000bd2:	bf38      	it	cc
 8000bd4:	250c      	movcc	r5, #12
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	4607      	mov	r7, r0
 8000bda:	db01      	blt.n	8000be0 <_malloc_r+0x1c>
 8000bdc:	42a9      	cmp	r1, r5
 8000bde:	d905      	bls.n	8000bec <_malloc_r+0x28>
 8000be0:	230c      	movs	r3, #12
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	2600      	movs	r6, #0
 8000be6:	4630      	mov	r0, r6
 8000be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bec:	4e2e      	ldr	r6, [pc, #184]	; (8000ca8 <_malloc_r+0xe4>)
 8000bee:	f000 fa81 	bl	80010f4 <__malloc_lock>
 8000bf2:	6833      	ldr	r3, [r6, #0]
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	bb34      	cbnz	r4, 8000c46 <_malloc_r+0x82>
 8000bf8:	4629      	mov	r1, r5
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	f7ff ffc2 	bl	8000b84 <sbrk_aligned>
 8000c00:	1c43      	adds	r3, r0, #1
 8000c02:	4604      	mov	r4, r0
 8000c04:	d14d      	bne.n	8000ca2 <_malloc_r+0xde>
 8000c06:	6834      	ldr	r4, [r6, #0]
 8000c08:	4626      	mov	r6, r4
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d140      	bne.n	8000c90 <_malloc_r+0xcc>
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	4631      	mov	r1, r6
 8000c12:	4638      	mov	r0, r7
 8000c14:	eb04 0803 	add.w	r8, r4, r3
 8000c18:	f000 f8be 	bl	8000d98 <_sbrk_r>
 8000c1c:	4580      	cmp	r8, r0
 8000c1e:	d13a      	bne.n	8000c96 <_malloc_r+0xd2>
 8000c20:	6821      	ldr	r1, [r4, #0]
 8000c22:	3503      	adds	r5, #3
 8000c24:	1a6d      	subs	r5, r5, r1
 8000c26:	f025 0503 	bic.w	r5, r5, #3
 8000c2a:	3508      	adds	r5, #8
 8000c2c:	2d0c      	cmp	r5, #12
 8000c2e:	bf38      	it	cc
 8000c30:	250c      	movcc	r5, #12
 8000c32:	4629      	mov	r1, r5
 8000c34:	4638      	mov	r0, r7
 8000c36:	f7ff ffa5 	bl	8000b84 <sbrk_aligned>
 8000c3a:	3001      	adds	r0, #1
 8000c3c:	d02b      	beq.n	8000c96 <_malloc_r+0xd2>
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	442b      	add	r3, r5
 8000c42:	6023      	str	r3, [r4, #0]
 8000c44:	e00e      	b.n	8000c64 <_malloc_r+0xa0>
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	1b52      	subs	r2, r2, r5
 8000c4a:	d41e      	bmi.n	8000c8a <_malloc_r+0xc6>
 8000c4c:	2a0b      	cmp	r2, #11
 8000c4e:	d916      	bls.n	8000c7e <_malloc_r+0xba>
 8000c50:	1961      	adds	r1, r4, r5
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	6025      	str	r5, [r4, #0]
 8000c56:	bf18      	it	ne
 8000c58:	6059      	strne	r1, [r3, #4]
 8000c5a:	6863      	ldr	r3, [r4, #4]
 8000c5c:	bf08      	it	eq
 8000c5e:	6031      	streq	r1, [r6, #0]
 8000c60:	5162      	str	r2, [r4, r5]
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	4638      	mov	r0, r7
 8000c66:	f104 060b 	add.w	r6, r4, #11
 8000c6a:	f000 fa49 	bl	8001100 <__malloc_unlock>
 8000c6e:	f026 0607 	bic.w	r6, r6, #7
 8000c72:	1d23      	adds	r3, r4, #4
 8000c74:	1af2      	subs	r2, r6, r3
 8000c76:	d0b6      	beq.n	8000be6 <_malloc_r+0x22>
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	50a3      	str	r3, [r4, r2]
 8000c7c:	e7b3      	b.n	8000be6 <_malloc_r+0x22>
 8000c7e:	6862      	ldr	r2, [r4, #4]
 8000c80:	42a3      	cmp	r3, r4
 8000c82:	bf0c      	ite	eq
 8000c84:	6032      	streq	r2, [r6, #0]
 8000c86:	605a      	strne	r2, [r3, #4]
 8000c88:	e7ec      	b.n	8000c64 <_malloc_r+0xa0>
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	6864      	ldr	r4, [r4, #4]
 8000c8e:	e7b2      	b.n	8000bf6 <_malloc_r+0x32>
 8000c90:	4634      	mov	r4, r6
 8000c92:	6876      	ldr	r6, [r6, #4]
 8000c94:	e7b9      	b.n	8000c0a <_malloc_r+0x46>
 8000c96:	230c      	movs	r3, #12
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	f000 fa30 	bl	8001100 <__malloc_unlock>
 8000ca0:	e7a1      	b.n	8000be6 <_malloc_r+0x22>
 8000ca2:	6025      	str	r5, [r4, #0]
 8000ca4:	e7de      	b.n	8000c64 <_malloc_r+0xa0>
 8000ca6:	bf00      	nop
 8000ca8:	20000088 	.word	0x20000088

08000cac <_puts_r>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	460e      	mov	r6, r1
 8000cb0:	4605      	mov	r5, r0
 8000cb2:	b118      	cbz	r0, 8000cbc <_puts_r+0x10>
 8000cb4:	6983      	ldr	r3, [r0, #24]
 8000cb6:	b90b      	cbnz	r3, 8000cbc <_puts_r+0x10>
 8000cb8:	f7ff fe4c 	bl	8000954 <__sinit>
 8000cbc:	69ab      	ldr	r3, [r5, #24]
 8000cbe:	68ac      	ldr	r4, [r5, #8]
 8000cc0:	b913      	cbnz	r3, 8000cc8 <_puts_r+0x1c>
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f7ff fe46 	bl	8000954 <__sinit>
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <_puts_r+0xd0>)
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	d120      	bne.n	8000d10 <_puts_r+0x64>
 8000cce:	686c      	ldr	r4, [r5, #4]
 8000cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cd2:	07db      	lsls	r3, r3, #31
 8000cd4:	d405      	bmi.n	8000ce2 <_puts_r+0x36>
 8000cd6:	89a3      	ldrh	r3, [r4, #12]
 8000cd8:	0598      	lsls	r0, r3, #22
 8000cda:	d402      	bmi.n	8000ce2 <_puts_r+0x36>
 8000cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cde:	f7ff fefc 	bl	8000ada <__retarget_lock_acquire_recursive>
 8000ce2:	89a3      	ldrh	r3, [r4, #12]
 8000ce4:	0719      	lsls	r1, r3, #28
 8000ce6:	d51d      	bpl.n	8000d24 <_puts_r+0x78>
 8000ce8:	6923      	ldr	r3, [r4, #16]
 8000cea:	b1db      	cbz	r3, 8000d24 <_puts_r+0x78>
 8000cec:	3e01      	subs	r6, #1
 8000cee:	68a3      	ldr	r3, [r4, #8]
 8000cf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	60a3      	str	r3, [r4, #8]
 8000cf8:	bb39      	cbnz	r1, 8000d4a <_puts_r+0x9e>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da38      	bge.n	8000d70 <_puts_r+0xc4>
 8000cfe:	4622      	mov	r2, r4
 8000d00:	210a      	movs	r1, #10
 8000d02:	4628      	mov	r0, r5
 8000d04:	f000 f89c 	bl	8000e40 <__swbuf_r>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d011      	beq.n	8000d30 <_puts_r+0x84>
 8000d0c:	250a      	movs	r5, #10
 8000d0e:	e011      	b.n	8000d34 <_puts_r+0x88>
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <_puts_r+0xd4>)
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d101      	bne.n	8000d1a <_puts_r+0x6e>
 8000d16:	68ac      	ldr	r4, [r5, #8]
 8000d18:	e7da      	b.n	8000cd0 <_puts_r+0x24>
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <_puts_r+0xd8>)
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	bf08      	it	eq
 8000d20:	68ec      	ldreq	r4, [r5, #12]
 8000d22:	e7d5      	b.n	8000cd0 <_puts_r+0x24>
 8000d24:	4621      	mov	r1, r4
 8000d26:	4628      	mov	r0, r5
 8000d28:	f000 f8ee 	bl	8000f08 <__swsetup_r>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d0dd      	beq.n	8000cec <_puts_r+0x40>
 8000d30:	f04f 35ff 	mov.w	r5, #4294967295
 8000d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d36:	07da      	lsls	r2, r3, #31
 8000d38:	d405      	bmi.n	8000d46 <_puts_r+0x9a>
 8000d3a:	89a3      	ldrh	r3, [r4, #12]
 8000d3c:	059b      	lsls	r3, r3, #22
 8000d3e:	d402      	bmi.n	8000d46 <_puts_r+0x9a>
 8000d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d42:	f7ff fecb 	bl	8000adc <__retarget_lock_release_recursive>
 8000d46:	4628      	mov	r0, r5
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da04      	bge.n	8000d58 <_puts_r+0xac>
 8000d4e:	69a2      	ldr	r2, [r4, #24]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dc06      	bgt.n	8000d62 <_puts_r+0xb6>
 8000d54:	290a      	cmp	r1, #10
 8000d56:	d004      	beq.n	8000d62 <_puts_r+0xb6>
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	6022      	str	r2, [r4, #0]
 8000d5e:	7019      	strb	r1, [r3, #0]
 8000d60:	e7c5      	b.n	8000cee <_puts_r+0x42>
 8000d62:	4622      	mov	r2, r4
 8000d64:	4628      	mov	r0, r5
 8000d66:	f000 f86b 	bl	8000e40 <__swbuf_r>
 8000d6a:	3001      	adds	r0, #1
 8000d6c:	d1bf      	bne.n	8000cee <_puts_r+0x42>
 8000d6e:	e7df      	b.n	8000d30 <_puts_r+0x84>
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	250a      	movs	r5, #10
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	6022      	str	r2, [r4, #0]
 8000d78:	701d      	strb	r5, [r3, #0]
 8000d7a:	e7db      	b.n	8000d34 <_puts_r+0x88>
 8000d7c:	080011ec 	.word	0x080011ec
 8000d80:	0800120c 	.word	0x0800120c
 8000d84:	080011cc 	.word	0x080011cc

08000d88 <puts>:
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <puts+0xc>)
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	f7ff bf8d 	b.w	8000cac <_puts_r>
 8000d92:	bf00      	nop
 8000d94:	20000000 	.word	0x20000000

08000d98 <_sbrk_r>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4d06      	ldr	r5, [pc, #24]	; (8000db4 <_sbrk_r+0x1c>)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	4608      	mov	r0, r1
 8000da2:	602b      	str	r3, [r5, #0]
 8000da4:	f7ff fc48 	bl	8000638 <_sbrk>
 8000da8:	1c43      	adds	r3, r0, #1
 8000daa:	d102      	bne.n	8000db2 <_sbrk_r+0x1a>
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	b103      	cbz	r3, 8000db2 <_sbrk_r+0x1a>
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	bd38      	pop	{r3, r4, r5, pc}
 8000db4:	20000090 	.word	0x20000090

08000db8 <__sread>:
 8000db8:	b510      	push	{r4, lr}
 8000dba:	460c      	mov	r4, r1
 8000dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dc0:	f000 f9a4 	bl	800110c <_read_r>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	bfab      	itete	ge
 8000dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000dca:	89a3      	ldrhlt	r3, [r4, #12]
 8000dcc:	181b      	addge	r3, r3, r0
 8000dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dd2:	bfac      	ite	ge
 8000dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000dd6:	81a3      	strhlt	r3, [r4, #12]
 8000dd8:	bd10      	pop	{r4, pc}

08000dda <__swrite>:
 8000dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dde:	461f      	mov	r7, r3
 8000de0:	898b      	ldrh	r3, [r1, #12]
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	4605      	mov	r5, r0
 8000de6:	460c      	mov	r4, r1
 8000de8:	4616      	mov	r6, r2
 8000dea:	d505      	bpl.n	8000df8 <__swrite+0x1e>
 8000dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df0:	2302      	movs	r3, #2
 8000df2:	2200      	movs	r2, #0
 8000df4:	f000 f906 	bl	8001004 <_lseek_r>
 8000df8:	89a3      	ldrh	r3, [r4, #12]
 8000dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e02:	81a3      	strh	r3, [r4, #12]
 8000e04:	4632      	mov	r2, r6
 8000e06:	463b      	mov	r3, r7
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0e:	f000 b869 	b.w	8000ee4 <_write_r>

08000e12 <__sseek>:
 8000e12:	b510      	push	{r4, lr}
 8000e14:	460c      	mov	r4, r1
 8000e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e1a:	f000 f8f3 	bl	8001004 <_lseek_r>
 8000e1e:	1c43      	adds	r3, r0, #1
 8000e20:	89a3      	ldrh	r3, [r4, #12]
 8000e22:	bf15      	itete	ne
 8000e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e2e:	81a3      	strheq	r3, [r4, #12]
 8000e30:	bf18      	it	ne
 8000e32:	81a3      	strhne	r3, [r4, #12]
 8000e34:	bd10      	pop	{r4, pc}

08000e36 <__sclose>:
 8000e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e3a:	f000 b8d3 	b.w	8000fe4 <_close_r>
	...

08000e40 <__swbuf_r>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	460e      	mov	r6, r1
 8000e44:	4614      	mov	r4, r2
 8000e46:	4605      	mov	r5, r0
 8000e48:	b118      	cbz	r0, 8000e52 <__swbuf_r+0x12>
 8000e4a:	6983      	ldr	r3, [r0, #24]
 8000e4c:	b90b      	cbnz	r3, 8000e52 <__swbuf_r+0x12>
 8000e4e:	f7ff fd81 	bl	8000954 <__sinit>
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <__swbuf_r+0x98>)
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d12b      	bne.n	8000eb0 <__swbuf_r+0x70>
 8000e58:	686c      	ldr	r4, [r5, #4]
 8000e5a:	69a3      	ldr	r3, [r4, #24]
 8000e5c:	60a3      	str	r3, [r4, #8]
 8000e5e:	89a3      	ldrh	r3, [r4, #12]
 8000e60:	071a      	lsls	r2, r3, #28
 8000e62:	d52f      	bpl.n	8000ec4 <__swbuf_r+0x84>
 8000e64:	6923      	ldr	r3, [r4, #16]
 8000e66:	b36b      	cbz	r3, 8000ec4 <__swbuf_r+0x84>
 8000e68:	6923      	ldr	r3, [r4, #16]
 8000e6a:	6820      	ldr	r0, [r4, #0]
 8000e6c:	1ac0      	subs	r0, r0, r3
 8000e6e:	6963      	ldr	r3, [r4, #20]
 8000e70:	b2f6      	uxtb	r6, r6
 8000e72:	4283      	cmp	r3, r0
 8000e74:	4637      	mov	r7, r6
 8000e76:	dc04      	bgt.n	8000e82 <__swbuf_r+0x42>
 8000e78:	4621      	mov	r1, r4
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	f7ff fcc4 	bl	8000808 <_fflush_r>
 8000e80:	bb30      	cbnz	r0, 8000ed0 <__swbuf_r+0x90>
 8000e82:	68a3      	ldr	r3, [r4, #8]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	60a3      	str	r3, [r4, #8]
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	6022      	str	r2, [r4, #0]
 8000e8e:	701e      	strb	r6, [r3, #0]
 8000e90:	6963      	ldr	r3, [r4, #20]
 8000e92:	3001      	adds	r0, #1
 8000e94:	4283      	cmp	r3, r0
 8000e96:	d004      	beq.n	8000ea2 <__swbuf_r+0x62>
 8000e98:	89a3      	ldrh	r3, [r4, #12]
 8000e9a:	07db      	lsls	r3, r3, #31
 8000e9c:	d506      	bpl.n	8000eac <__swbuf_r+0x6c>
 8000e9e:	2e0a      	cmp	r6, #10
 8000ea0:	d104      	bne.n	8000eac <__swbuf_r+0x6c>
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f7ff fcaf 	bl	8000808 <_fflush_r>
 8000eaa:	b988      	cbnz	r0, 8000ed0 <__swbuf_r+0x90>
 8000eac:	4638      	mov	r0, r7
 8000eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <__swbuf_r+0x9c>)
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	d101      	bne.n	8000eba <__swbuf_r+0x7a>
 8000eb6:	68ac      	ldr	r4, [r5, #8]
 8000eb8:	e7cf      	b.n	8000e5a <__swbuf_r+0x1a>
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <__swbuf_r+0xa0>)
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	bf08      	it	eq
 8000ec0:	68ec      	ldreq	r4, [r5, #12]
 8000ec2:	e7ca      	b.n	8000e5a <__swbuf_r+0x1a>
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f000 f81e 	bl	8000f08 <__swsetup_r>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d0cb      	beq.n	8000e68 <__swbuf_r+0x28>
 8000ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8000ed4:	e7ea      	b.n	8000eac <__swbuf_r+0x6c>
 8000ed6:	bf00      	nop
 8000ed8:	080011ec 	.word	0x080011ec
 8000edc:	0800120c 	.word	0x0800120c
 8000ee0:	080011cc 	.word	0x080011cc

08000ee4 <_write_r>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	4d07      	ldr	r5, [pc, #28]	; (8000f04 <_write_r+0x20>)
 8000ee8:	4604      	mov	r4, r0
 8000eea:	4608      	mov	r0, r1
 8000eec:	4611      	mov	r1, r2
 8000eee:	2200      	movs	r2, #0
 8000ef0:	602a      	str	r2, [r5, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f7ff fb53 	bl	800059e <_write>
 8000ef8:	1c43      	adds	r3, r0, #1
 8000efa:	d102      	bne.n	8000f02 <_write_r+0x1e>
 8000efc:	682b      	ldr	r3, [r5, #0]
 8000efe:	b103      	cbz	r3, 8000f02 <_write_r+0x1e>
 8000f00:	6023      	str	r3, [r4, #0]
 8000f02:	bd38      	pop	{r3, r4, r5, pc}
 8000f04:	20000090 	.word	0x20000090

08000f08 <__swsetup_r>:
 8000f08:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <__swsetup_r+0xcc>)
 8000f0a:	b570      	push	{r4, r5, r6, lr}
 8000f0c:	681d      	ldr	r5, [r3, #0]
 8000f0e:	4606      	mov	r6, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	b125      	cbz	r5, 8000f1e <__swsetup_r+0x16>
 8000f14:	69ab      	ldr	r3, [r5, #24]
 8000f16:	b913      	cbnz	r3, 8000f1e <__swsetup_r+0x16>
 8000f18:	4628      	mov	r0, r5
 8000f1a:	f7ff fd1b 	bl	8000954 <__sinit>
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <__swsetup_r+0xd0>)
 8000f20:	429c      	cmp	r4, r3
 8000f22:	d10f      	bne.n	8000f44 <__swsetup_r+0x3c>
 8000f24:	686c      	ldr	r4, [r5, #4]
 8000f26:	89a3      	ldrh	r3, [r4, #12]
 8000f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000f2c:	0719      	lsls	r1, r3, #28
 8000f2e:	d42c      	bmi.n	8000f8a <__swsetup_r+0x82>
 8000f30:	06dd      	lsls	r5, r3, #27
 8000f32:	d411      	bmi.n	8000f58 <__swsetup_r+0x50>
 8000f34:	2309      	movs	r3, #9
 8000f36:	6033      	str	r3, [r6, #0]
 8000f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000f3c:	81a3      	strh	r3, [r4, #12]
 8000f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f42:	e03e      	b.n	8000fc2 <__swsetup_r+0xba>
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <__swsetup_r+0xd4>)
 8000f46:	429c      	cmp	r4, r3
 8000f48:	d101      	bne.n	8000f4e <__swsetup_r+0x46>
 8000f4a:	68ac      	ldr	r4, [r5, #8]
 8000f4c:	e7eb      	b.n	8000f26 <__swsetup_r+0x1e>
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <__swsetup_r+0xd8>)
 8000f50:	429c      	cmp	r4, r3
 8000f52:	bf08      	it	eq
 8000f54:	68ec      	ldreq	r4, [r5, #12]
 8000f56:	e7e6      	b.n	8000f26 <__swsetup_r+0x1e>
 8000f58:	0758      	lsls	r0, r3, #29
 8000f5a:	d512      	bpl.n	8000f82 <__swsetup_r+0x7a>
 8000f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f5e:	b141      	cbz	r1, 8000f72 <__swsetup_r+0x6a>
 8000f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f64:	4299      	cmp	r1, r3
 8000f66:	d002      	beq.n	8000f6e <__swsetup_r+0x66>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f7ff fdc1 	bl	8000af0 <_free_r>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	6363      	str	r3, [r4, #52]	; 0x34
 8000f72:	89a3      	ldrh	r3, [r4, #12]
 8000f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000f78:	81a3      	strh	r3, [r4, #12]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6063      	str	r3, [r4, #4]
 8000f7e:	6923      	ldr	r3, [r4, #16]
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	89a3      	ldrh	r3, [r4, #12]
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	81a3      	strh	r3, [r4, #12]
 8000f8a:	6923      	ldr	r3, [r4, #16]
 8000f8c:	b94b      	cbnz	r3, 8000fa2 <__swsetup_r+0x9a>
 8000f8e:	89a3      	ldrh	r3, [r4, #12]
 8000f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f98:	d003      	beq.n	8000fa2 <__swsetup_r+0x9a>
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f000 f869 	bl	8001074 <__smakebuf_r>
 8000fa2:	89a0      	ldrh	r0, [r4, #12]
 8000fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000fa8:	f010 0301 	ands.w	r3, r0, #1
 8000fac:	d00a      	beq.n	8000fc4 <__swsetup_r+0xbc>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60a3      	str	r3, [r4, #8]
 8000fb2:	6963      	ldr	r3, [r4, #20]
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	61a3      	str	r3, [r4, #24]
 8000fb8:	6923      	ldr	r3, [r4, #16]
 8000fba:	b943      	cbnz	r3, 8000fce <__swsetup_r+0xc6>
 8000fbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000fc0:	d1ba      	bne.n	8000f38 <__swsetup_r+0x30>
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	0781      	lsls	r1, r0, #30
 8000fc6:	bf58      	it	pl
 8000fc8:	6963      	ldrpl	r3, [r4, #20]
 8000fca:	60a3      	str	r3, [r4, #8]
 8000fcc:	e7f4      	b.n	8000fb8 <__swsetup_r+0xb0>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	e7f7      	b.n	8000fc2 <__swsetup_r+0xba>
 8000fd2:	bf00      	nop
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	080011ec 	.word	0x080011ec
 8000fdc:	0800120c 	.word	0x0800120c
 8000fe0:	080011cc 	.word	0x080011cc

08000fe4 <_close_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4d06      	ldr	r5, [pc, #24]	; (8001000 <_close_r+0x1c>)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	602b      	str	r3, [r5, #0]
 8000ff0:	f7ff faf1 	bl	80005d6 <_close>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_close_r+0x1a>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_close_r+0x1a>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	20000090 	.word	0x20000090

08001004 <_lseek_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4d07      	ldr	r5, [pc, #28]	; (8001024 <_lseek_r+0x20>)
 8001008:	4604      	mov	r4, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4611      	mov	r1, r2
 800100e:	2200      	movs	r2, #0
 8001010:	602a      	str	r2, [r5, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	f7ff fb03 	bl	800061e <_lseek>
 8001018:	1c43      	adds	r3, r0, #1
 800101a:	d102      	bne.n	8001022 <_lseek_r+0x1e>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	b103      	cbz	r3, 8001022 <_lseek_r+0x1e>
 8001020:	6023      	str	r3, [r4, #0]
 8001022:	bd38      	pop	{r3, r4, r5, pc}
 8001024:	20000090 	.word	0x20000090

08001028 <__swhatbuf_r>:
 8001028:	b570      	push	{r4, r5, r6, lr}
 800102a:	460e      	mov	r6, r1
 800102c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001030:	2900      	cmp	r1, #0
 8001032:	b096      	sub	sp, #88	; 0x58
 8001034:	4614      	mov	r4, r2
 8001036:	461d      	mov	r5, r3
 8001038:	da08      	bge.n	800104c <__swhatbuf_r+0x24>
 800103a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	602a      	str	r2, [r5, #0]
 8001042:	061a      	lsls	r2, r3, #24
 8001044:	d410      	bmi.n	8001068 <__swhatbuf_r+0x40>
 8001046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104a:	e00e      	b.n	800106a <__swhatbuf_r+0x42>
 800104c:	466a      	mov	r2, sp
 800104e:	f000 f86f 	bl	8001130 <_fstat_r>
 8001052:	2800      	cmp	r0, #0
 8001054:	dbf1      	blt.n	800103a <__swhatbuf_r+0x12>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800105c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001060:	425a      	negs	r2, r3
 8001062:	415a      	adcs	r2, r3
 8001064:	602a      	str	r2, [r5, #0]
 8001066:	e7ee      	b.n	8001046 <__swhatbuf_r+0x1e>
 8001068:	2340      	movs	r3, #64	; 0x40
 800106a:	2000      	movs	r0, #0
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	b016      	add	sp, #88	; 0x58
 8001070:	bd70      	pop	{r4, r5, r6, pc}
	...

08001074 <__smakebuf_r>:
 8001074:	898b      	ldrh	r3, [r1, #12]
 8001076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001078:	079d      	lsls	r5, r3, #30
 800107a:	4606      	mov	r6, r0
 800107c:	460c      	mov	r4, r1
 800107e:	d507      	bpl.n	8001090 <__smakebuf_r+0x1c>
 8001080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	6123      	str	r3, [r4, #16]
 8001088:	2301      	movs	r3, #1
 800108a:	6163      	str	r3, [r4, #20]
 800108c:	b002      	add	sp, #8
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	ab01      	add	r3, sp, #4
 8001092:	466a      	mov	r2, sp
 8001094:	f7ff ffc8 	bl	8001028 <__swhatbuf_r>
 8001098:	9900      	ldr	r1, [sp, #0]
 800109a:	4605      	mov	r5, r0
 800109c:	4630      	mov	r0, r6
 800109e:	f7ff fd91 	bl	8000bc4 <_malloc_r>
 80010a2:	b948      	cbnz	r0, 80010b8 <__smakebuf_r+0x44>
 80010a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010a8:	059a      	lsls	r2, r3, #22
 80010aa:	d4ef      	bmi.n	800108c <__smakebuf_r+0x18>
 80010ac:	f023 0303 	bic.w	r3, r3, #3
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	81a3      	strh	r3, [r4, #12]
 80010b6:	e7e3      	b.n	8001080 <__smakebuf_r+0xc>
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <__smakebuf_r+0x7c>)
 80010ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	6020      	str	r0, [r4, #0]
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	81a3      	strh	r3, [r4, #12]
 80010c6:	9b00      	ldr	r3, [sp, #0]
 80010c8:	6163      	str	r3, [r4, #20]
 80010ca:	9b01      	ldr	r3, [sp, #4]
 80010cc:	6120      	str	r0, [r4, #16]
 80010ce:	b15b      	cbz	r3, 80010e8 <__smakebuf_r+0x74>
 80010d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010d4:	4630      	mov	r0, r6
 80010d6:	f000 f83d 	bl	8001154 <_isatty_r>
 80010da:	b128      	cbz	r0, 80010e8 <__smakebuf_r+0x74>
 80010dc:	89a3      	ldrh	r3, [r4, #12]
 80010de:	f023 0303 	bic.w	r3, r3, #3
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	81a3      	strh	r3, [r4, #12]
 80010e8:	89a0      	ldrh	r0, [r4, #12]
 80010ea:	4305      	orrs	r5, r0
 80010ec:	81a5      	strh	r5, [r4, #12]
 80010ee:	e7cd      	b.n	800108c <__smakebuf_r+0x18>
 80010f0:	080008ed 	.word	0x080008ed

080010f4 <__malloc_lock>:
 80010f4:	4801      	ldr	r0, [pc, #4]	; (80010fc <__malloc_lock+0x8>)
 80010f6:	f7ff bcf0 	b.w	8000ada <__retarget_lock_acquire_recursive>
 80010fa:	bf00      	nop
 80010fc:	20000084 	.word	0x20000084

08001100 <__malloc_unlock>:
 8001100:	4801      	ldr	r0, [pc, #4]	; (8001108 <__malloc_unlock+0x8>)
 8001102:	f7ff bceb 	b.w	8000adc <__retarget_lock_release_recursive>
 8001106:	bf00      	nop
 8001108:	20000084 	.word	0x20000084

0800110c <_read_r>:
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4d07      	ldr	r5, [pc, #28]	; (800112c <_read_r+0x20>)
 8001110:	4604      	mov	r4, r0
 8001112:	4608      	mov	r0, r1
 8001114:	4611      	mov	r1, r2
 8001116:	2200      	movs	r2, #0
 8001118:	602a      	str	r2, [r5, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	f7ff fa22 	bl	8000564 <_read>
 8001120:	1c43      	adds	r3, r0, #1
 8001122:	d102      	bne.n	800112a <_read_r+0x1e>
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	b103      	cbz	r3, 800112a <_read_r+0x1e>
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	bd38      	pop	{r3, r4, r5, pc}
 800112c:	20000090 	.word	0x20000090

08001130 <_fstat_r>:
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	4d07      	ldr	r5, [pc, #28]	; (8001150 <_fstat_r+0x20>)
 8001134:	2300      	movs	r3, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	602b      	str	r3, [r5, #0]
 800113e:	f7ff fa55 	bl	80005ec <_fstat>
 8001142:	1c43      	adds	r3, r0, #1
 8001144:	d102      	bne.n	800114c <_fstat_r+0x1c>
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	b103      	cbz	r3, 800114c <_fstat_r+0x1c>
 800114a:	6023      	str	r3, [r4, #0]
 800114c:	bd38      	pop	{r3, r4, r5, pc}
 800114e:	bf00      	nop
 8001150:	20000090 	.word	0x20000090

08001154 <_isatty_r>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	4d06      	ldr	r5, [pc, #24]	; (8001170 <_isatty_r+0x1c>)
 8001158:	2300      	movs	r3, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	602b      	str	r3, [r5, #0]
 8001160:	f7ff fa53 	bl	800060a <_isatty>
 8001164:	1c43      	adds	r3, r0, #1
 8001166:	d102      	bne.n	800116e <_isatty_r+0x1a>
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	b103      	cbz	r3, 800116e <_isatty_r+0x1a>
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	bd38      	pop	{r3, r4, r5, pc}
 8001170:	20000090 	.word	0x20000090

08001174 <_init>:
 8001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001176:	bf00      	nop
 8001178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117a:	bc08      	pop	{r3}
 800117c:	469e      	mov	lr, r3
 800117e:	4770      	bx	lr

08001180 <_fini>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	bf00      	nop
 8001184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001186:	bc08      	pop	{r3}
 8001188:	469e      	mov	lr, r3
 800118a:	4770      	bx	lr


A05TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000124c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001498  08001498  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001498  08001498  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001498  08001498  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001498  08001498  00011498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800149c  0800149c  0001149c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080014a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000068  08001508  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001508  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e84  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000563  00000000  00000000  00020f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00021680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d20  00000000  00000000  00021838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001acd  00000000  00000000  00024558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009958  00000000  00000000  00026025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002f97d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d70  00000000  00000000  0002f9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080013f8 	.word	0x080013f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080013f8 	.word	0x080013f8

08000204 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

	uint32_t *pRCC_AHB1ENR = (uint32_t*)0x40023830;  //0x40023800
 800020a:	4b19      	ldr	r3, [pc, #100]	; (8000270 <led_init_all+0x6c>)
 800020c:	607b      	str	r3, [r7, #4]
	uint32_t *pGPIOAMODER = (uint32_t*)0x40020000; //0x40020C00
 800020e:	4b19      	ldr	r3, [pc, #100]	; (8000274 <led_init_all+0x70>)
 8000210:	603b      	str	r3, [r7, #0]


	*pRCC_AHB1ENR |= ( 1 << 0); //ENABLE GPIOA
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0201 	orr.w	r2, r3, #1
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGPIOAMODER |= ( 1 << (2 * LED_GREEN));
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0201 	orr.w	r2, r3, #1
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	601a      	str	r2, [r3, #0]
	*pGPIOAMODER |= ( 1 << (2 * LED_YELLOW));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGPIOAMODER |= ( 1 << (2 * LED_RED));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 0204 	orr.w	r2, r3, #4
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGPIOAMODER |= ( 1 << (2 * LED_BLUE));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f82a 	bl	80002a8 <led_off>
    led_off(LED_YELLOW);
 8000254:	2004      	movs	r0, #4
 8000256:	f000 f827 	bl	80002a8 <led_off>
    led_off(LED_RED);
 800025a:	2001      	movs	r0, #1
 800025c:	f000 f824 	bl	80002a8 <led_off>
    led_off(LED_BLUE);
 8000260:	2006      	movs	r0, #6
 8000262:	f000 f821 	bl	80002a8 <led_off>



}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40023830 	.word	0x40023830
 8000274:	40020000 	.word	0x40020000

08000278 <led_on>:

void led_on(uint8_t led_no)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGPIOADATAREG = (uint32_t*)0x40020014;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <led_on+0x2c>)
 8000284:	60fb      	str	r3, [r7, #12]
  *pGPIOADATAREG |= ( 1 << led_no);
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	79fa      	ldrb	r2, [r7, #7]
 800028c:	2101      	movs	r1, #1
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	431a      	orrs	r2, r3
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	601a      	str	r2, [r3, #0]

}
 8000298:	bf00      	nop
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020014 	.word	0x40020014

080002a8 <led_off>:

void led_off(uint8_t led_no)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGPIOADATAREG = (uint32_t*)0x40020014;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <led_off+0x2c>)
 80002b4:	60fb      	str	r3, [r7, #12]
	  *pGPIOADATAREG &= ~( 1 << led_no);
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	43d2      	mvns	r2, r2
 80002c4:	401a      	ands	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	601a      	str	r2, [r3, #0]

}
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40020014 	.word	0x40020014

080002d8 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002dc:	f000 f91c 	bl	8000518 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002e0:	4807      	ldr	r0, [pc, #28]	; (8000300 <main+0x28>)
 80002e2:	f000 f885 	bl	80003f0 <init_scheduler_stack>

	init_task_stack();
 80002e6:	f000 f889 	bl	80003fc <init_task_stack>

	led_init_all();
 80002ea:	f7ff ff8b 	bl	8000204 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f2:	f000 f849 	bl	8000388 <init_systick_timer>

	switch_sp_to_psp();
 80002f6:	f000 f9ad 	bl	8000654 <switch_sp_to_psp>

	task1_handler();
 80002fa:	f000 f806 	bl	800030a <task1_handler>

	for(;;);
 80002fe:	e7fe      	b.n	80002fe <main+0x26>
 8000300:	2001ec00 	.word	0x2001ec00

08000304 <idle_task>:
}

void idle_task(void){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	while(1){
 8000308:	e7fe      	b.n	8000308 <idle_task+0x4>

0800030a <task1_handler>:

	}
}

void task1_handler(void){
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 800030e:	2000      	movs	r0, #0
 8000310:	f7ff ffb2 	bl	8000278 <led_on>
		task_delay(125);
 8000314:	207d      	movs	r0, #125	; 0x7d
 8000316:	f000 f9ab 	bl	8000670 <task_delay>
		led_off(LED_GREEN);
 800031a:	2000      	movs	r0, #0
 800031c:	f7ff ffc4 	bl	80002a8 <led_off>
		task_delay(125);
 8000320:	207d      	movs	r0, #125	; 0x7d
 8000322:	f000 f9a5 	bl	8000670 <task_delay>
		led_on(LED_GREEN);
 8000326:	e7f2      	b.n	800030e <task1_handler+0x4>

08000328 <task2_handler>:
	}
}

void task2_handler(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ffa3 	bl	8000278 <led_on>
		task_delay(500);
 8000332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000336:	f000 f99b 	bl	8000670 <task_delay>
		led_off(LED_RED);
 800033a:	2001      	movs	r0, #1
 800033c:	f7ff ffb4 	bl	80002a8 <led_off>
		task_delay(500);
 8000340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000344:	f000 f994 	bl	8000670 <task_delay>
		led_on(LED_RED);
 8000348:	e7f0      	b.n	800032c <task2_handler+0x4>

0800034a <task3_handler>:
	}
}

void task3_handler(void){
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_YELLOW);
 800034e:	2004      	movs	r0, #4
 8000350:	f7ff ff92 	bl	8000278 <led_on>
		task_delay(250);
 8000354:	20fa      	movs	r0, #250	; 0xfa
 8000356:	f000 f98b 	bl	8000670 <task_delay>
		led_off(LED_YELLOW);
 800035a:	2004      	movs	r0, #4
 800035c:	f7ff ffa4 	bl	80002a8 <led_off>
		task_delay(250);
 8000360:	20fa      	movs	r0, #250	; 0xfa
 8000362:	f000 f985 	bl	8000670 <task_delay>
		led_on(LED_YELLOW);
 8000366:	e7f2      	b.n	800034e <task3_handler+0x4>

08000368 <task4_handler>:
	}
}

void task4_handler(void){
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 800036c:	2006      	movs	r0, #6
 800036e:	f7ff ff83 	bl	8000278 <led_on>
		task_delay(125);
 8000372:	207d      	movs	r0, #125	; 0x7d
 8000374:	f000 f97c 	bl	8000670 <task_delay>
		led_off(LED_BLUE);
 8000378:	2006      	movs	r0, #6
 800037a:	f7ff ff95 	bl	80002a8 <led_off>
		task_delay(125);
 800037e:	207d      	movs	r0, #125	; 0x7d
 8000380:	f000 f976 	bl	8000670 <task_delay>
		led_on(LED_BLUE);
 8000384:	e7f2      	b.n	800036c <task4_handler+0x4>
	...

08000388 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000388:	b480      	push	{r7}
 800038a:	b087      	sub	sp, #28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*) 0xE000E014;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <init_systick_timer+0x5c>)
 8000392:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*) 0xE000E010;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <init_systick_timer+0x60>)
 8000396:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK  / tick_hz)-1;
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <init_systick_timer+0x64>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a0:	3b01      	subs	r3, #1
 80003a2:	60fb      	str	r3, [r7, #12]

	// CLEAR THE SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]

	//LOAD ADJUSTED COUNT VALUE TO SVR
	*pSRVR |= count_value;
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	431a      	orrs	r2, r3
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	601a      	str	r2, [r3, #0]

	//CONFIGURE SETTINGS
	*pSCSR |= (1 << 1); // ENABLES SYSTICK EXCEPTION
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0202 	orr.w	r2, r3, #2
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // INDICATES CLOCK SOURCE AS INTERNAL
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 0204 	orr.w	r2, r3, #4
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 0); // ENABLE SYSTICK
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 0201 	orr.w	r2, r3, #1
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	601a      	str	r2, [r3, #0]

}
 80003da:	bf00      	nop
 80003dc:	371c      	adds	r7, #28
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	e000e014 	.word	0xe000e014
 80003e8:	e000e010 	.word	0xe000e010
 80003ec:	00f42400 	.word	0x00f42400

080003f0 <init_scheduler_stack>:

__attribute((naked)) void init_scheduler_stack(uint32_t sched_top_stack){
 80003f0:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(sched_top_stack):);
 80003f2:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003f6:	4770      	bx	lr
}
 80003f8:	bf00      	nop
	...

080003fc <init_task_stack>:


void init_task_stack(void){
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY;
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <init_task_stack+0xf0>)
 8000404:	2200      	movs	r2, #0
 8000406:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY;
 8000408:	4b38      	ldr	r3, [pc, #224]	; (80004ec <init_task_stack+0xf0>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY;
 800040e:	4b37      	ldr	r3, [pc, #220]	; (80004ec <init_task_stack+0xf0>)
 8000410:	2200      	movs	r2, #0
 8000412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY;
 8000416:	4b35      	ldr	r3, [pc, #212]	; (80004ec <init_task_stack+0xf0>)
 8000418:	2200      	movs	r2, #0
 800041a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY;
 800041e:	4b33      	ldr	r3, [pc, #204]	; (80004ec <init_task_stack+0xf0>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000426:	4b31      	ldr	r3, [pc, #196]	; (80004ec <init_task_stack+0xf0>)
 8000428:	4a31      	ldr	r2, [pc, #196]	; (80004f0 <init_task_stack+0xf4>)
 800042a:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 800042c:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <init_task_stack+0xf0>)
 800042e:	4a31      	ldr	r2, [pc, #196]	; (80004f4 <init_task_stack+0xf8>)
 8000430:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000432:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <init_task_stack+0xf0>)
 8000434:	4a30      	ldr	r2, [pc, #192]	; (80004f8 <init_task_stack+0xfc>)
 8000436:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000438:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <init_task_stack+0xf0>)
 800043a:	4a30      	ldr	r2, [pc, #192]	; (80004fc <init_task_stack+0x100>)
 800043c:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800043e:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <init_task_stack+0xf0>)
 8000440:	4a2f      	ldr	r2, [pc, #188]	; (8000500 <init_task_stack+0x104>)
 8000442:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000444:	4b29      	ldr	r3, [pc, #164]	; (80004ec <init_task_stack+0xf0>)
 8000446:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <init_task_stack+0x108>)
 8000448:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800044a:	4b28      	ldr	r3, [pc, #160]	; (80004ec <init_task_stack+0xf0>)
 800044c:	4a2e      	ldr	r2, [pc, #184]	; (8000508 <init_task_stack+0x10c>)
 800044e:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <init_task_stack+0xf0>)
 8000452:	4a2e      	ldr	r2, [pc, #184]	; (800050c <init_task_stack+0x110>)
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <init_task_stack+0xf0>)
 8000458:	4a2d      	ldr	r2, [pc, #180]	; (8000510 <init_task_stack+0x114>)
 800045a:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <init_task_stack+0xf0>)
 800045e:	4a2d      	ldr	r2, [pc, #180]	; (8000514 <init_task_stack+0x118>)
 8000460:	64da      	str	r2, [r3, #76]	; 0x4c



	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASKS; i++){
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	e037      	b.n	80004d8 <init_task_stack+0xdc>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000468:	4a20      	ldr	r2, [pc, #128]	; (80004ec <init_task_stack+0xf0>)
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	011b      	lsls	r3, r3, #4
 800046e:	4413      	add	r3, r2
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3b04      	subs	r3, #4
 8000478:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0X00100000
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000480:	601a      	str	r2, [r3, #0]

		pPSP--; 			// PC REGISTER
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3b04      	subs	r3, #4
 8000486:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000488:	4a18      	ldr	r2, [pc, #96]	; (80004ec <init_task_stack+0xf0>)
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	4413      	add	r3, r2
 8000490:	330c      	adds	r3, #12
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]

		pPSP--; 			// LR REGISTER
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3b04      	subs	r3, #4
 800049e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f06f 0202 	mvn.w	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]

		for(int j=0; j < 13; j++){
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e008      	b.n	80004c0 <init_task_stack+0xc4>
			pPSP--;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3b04      	subs	r3, #4
 80004b2:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
		for(int j=0; j < 13; j++){
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3301      	adds	r3, #1
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	ddf3      	ble.n	80004ae <init_task_stack+0xb2>
		}
		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	4908      	ldr	r1, [pc, #32]	; (80004ec <init_task_stack+0xf0>)
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	440b      	add	r3, r1
 80004d0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++){
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	2b04      	cmp	r3, #4
 80004dc:	ddc4      	ble.n	8000468 <init_task_stack+0x6c>
	}
}
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000088 	.word	0x20000088
 80004f0:	2001f000 	.word	0x2001f000
 80004f4:	20020000 	.word	0x20020000
 80004f8:	2001fc00 	.word	0x2001fc00
 80004fc:	2001f800 	.word	0x2001f800
 8000500:	2001f400 	.word	0x2001f400
 8000504:	08000305 	.word	0x08000305
 8000508:	0800030b 	.word	0x0800030b
 800050c:	08000329 	.word	0x08000329
 8000510:	0800034b 	.word	0x0800034b
 8000514:	08000369 	.word	0x08000369

08000518 <enable_processor_faults>:

void enable_processor_faults(void){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*) 0xE000ED24;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <enable_processor_faults+0x38>)
 8000520:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1 << 16); // MEM MANAGE
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // BUS FAULT
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // USAGE FAULT
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]

}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000ed24 	.word	0xe000ed24

08000554 <HardFault_Handler>:
void HardFault_Handler(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	printf("Hard Fault\n");
 8000558:	4801      	ldr	r0, [pc, #4]	; (8000560 <HardFault_Handler+0xc>)
 800055a:	f000 fac3 	bl	8000ae4 <puts>
	while(1);
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0xa>
 8000560:	08001410 	.word	0x08001410

08000564 <MemManage_Handler>:
}
void MemManage_Handler(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	printf("Mem manage\n");
 8000568:	4801      	ldr	r0, [pc, #4]	; (8000570 <MemManage_Handler+0xc>)
 800056a:	f000 fabb 	bl	8000ae4 <puts>
	while(1);
 800056e:	e7fe      	b.n	800056e <MemManage_Handler+0xa>
 8000570:	0800141c 	.word	0x0800141c

08000574 <BusFault_Handler>:
}
void BusFault_Handler(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	printf("Bus Fault\n");
 8000578:	4801      	ldr	r0, [pc, #4]	; (8000580 <BusFault_Handler+0xc>)
 800057a:	f000 fab3 	bl	8000ae4 <puts>
	while(1);
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0xa>
 8000580:	08001428 	.word	0x08001428

08000584 <get_psp_value>:
}


uint32_t get_psp_value(void){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <get_psp_value+0x18>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <get_psp_value+0x1c>)
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000088 	.word	0x20000088

080005a4 <save_psp_value>:
void save_psp_value(uint32_t stack_addr){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = stack_addr;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <save_psp_value+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <save_psp_value+0x24>)
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4413      	add	r3, r2
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000088 	.word	0x20000088

080005cc <update_next_task>:

void update_next_task(void){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED;
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	607b      	str	r3, [r7, #4]
	for(int i = 0; i< MAX_TASKS;i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	e024      	b.n	8000626 <update_next_task+0x5a>
		current_task++;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <update_next_task+0x7c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <update_next_task+0x7c>)
 80005e6:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <update_next_task+0x7c>)
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <update_next_task+0x80>)
 80005ee:	fba3 1302 	umull	r1, r3, r3, r2
 80005f2:	0899      	lsrs	r1, r3, #2
 80005f4:	460b      	mov	r3, r1
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	440b      	add	r3, r1
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <update_next_task+0x7c>)
 8000600:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <update_next_task+0x7c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <update_next_task+0x84>)
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	4413      	add	r3, r2
 800060c:	3308      	adds	r3, #8
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY) && (current_task != 0))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <update_next_task+0x54>
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <update_next_task+0x7c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <update_next_task+0x62>
	for(int i = 0; i< MAX_TASKS;i++){
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2b04      	cmp	r3, #4
 800062a:	ddd7      	ble.n	80005dc <update_next_task+0x10>
 800062c:	e000      	b.n	8000630 <update_next_task+0x64>
			break;
 800062e:	bf00      	nop
	}
	if(state != TASK_READY)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <update_next_task+0x70>
		current_task = 0;
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <update_next_task+0x7c>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000
 800064c:	cccccccd 	.word	0xcccccccd
 8000650:	20000088 	.word	0x20000088

08000654 <switch_sp_to_psp>:

__attribute((naked)) void switch_sp_to_psp(void){
	/*INIT PSP WITH TASK1 STACK START*/
	// GET CURRENT TASK PSP
	__asm volatile("PUSH {LR}"); //PRESERVE LR
 8000654:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 8000656:	f7ff ff95 	bl	8000584 <get_psp_value>
	__asm volatile("MSR PSP,R0"); //INIT PSP
 800065a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); //POPS BACK THE LR VALUE
 800065e:	f85d eb04 	ldr.w	lr, [sp], #4

	/*CHANGE SP TO PSP*/
	__asm volatile("MOV R0,#0X02");
 8000662:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 8000666:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800066a:	4770      	bx	lr

}
 800066c:	bf00      	nop
	...

08000670 <task_delay>:



void task_delay(uint32_t tick_count){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	INTERRUPT_DISABLE();
 8000678:	f04f 0001 	mov.w	r0, #1
 800067c:	f380 8810 	msr	PRIMASK, r0

	if(current_task){
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <task_delay+0x54>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d015      	beq.n	80006b4 <task_delay+0x44>
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <task_delay+0x58>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <task_delay+0x54>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	441a      	add	r2, r3
 8000696:	490d      	ldr	r1, [pc, #52]	; (80006cc <task_delay+0x5c>)
 8000698:	0103      	lsls	r3, r0, #4
 800069a:	440b      	add	r3, r1
 800069c:	3304      	adds	r3, #4
 800069e:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <task_delay+0x54>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4a09      	ldr	r2, [pc, #36]	; (80006cc <task_delay+0x5c>)
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	4413      	add	r3, r2
 80006aa:	3308      	adds	r3, #8
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	701a      	strb	r2, [r3, #0]
		schedule();
 80006b0:	f000 f80e 	bl	80006d0 <schedule>
	}

	INTERRUPT_ENABLE();
 80006b4:	f04f 0000 	mov.w	r0, #0
 80006b8:	f380 8810 	msr	PRIMASK, r0
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000084 	.word	0x20000084
 80006cc:	20000088 	.word	0x20000088

080006d0 <schedule>:

void schedule(void){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*) 0xE000ED04;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <schedule+0x20>)
 80006d8:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	e000ed04 	.word	0xe000ed04

080006f4 <PendSV_Handler>:

__attribute((naked))void PendSV_Handler(void){
	/*SAVE CURRENT TASK CONTEXT*/
		__asm volatile("MRS R0,PSP"); //GET CURRENT RUNNING TASK PSP
 80006f4:	f3ef 8009 	mrs	r0, PSP
		__asm volatile("STMDB R0!,{R4-R11}"); //STORE SF2 TO PSP
 80006f8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm volatile("PUSH {LR}"); //PRESERVE LR
 80006fc:	b500      	push	{lr}
		__asm volatile("BL save_psp_value"); //SAVE VALUE OF PSP
 80006fe:	f7ff ff51 	bl	80005a4 <save_psp_value>

		/*RETRIEVE NEXT TASK CONTEXT*/
		__asm volatile("BL update_next_task"); //CHOSE TASK TO RUN
 8000702:	f7ff ff63 	bl	80005cc <update_next_task>
		__asm volatile("BL get_psp_value"); //GET PAST PSP VALUE
 8000706:	f7ff ff3d 	bl	8000584 <get_psp_value>
		__asm volatile("LDMIA R0!,{R4-R11}"); //RETRIEVE SF2
 800070a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm volatile("MSR PSP,R0"); //UPDATE THE PSP
 800070e:	f380 8809 	msr	PSP, r0
		__asm volatile("POP {LR}"); //PRESERVE LR
 8000712:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm volatile("BX LR");
 8000716:	4770      	bx	lr
}
 8000718:	bf00      	nop
	...

0800071c <update_global_tick_count>:

void update_global_tick_count(void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <update_global_tick_count+0x18>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <update_global_tick_count+0x18>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000084 	.word	0x20000084

08000738 <unblock_tasks>:

void unblock_tasks(void){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_TASKS;i++){
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	e01b      	b.n	800077c <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY){
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <unblock_tasks+0x58>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	4413      	add	r3, r2
 800074c:	3308      	adds	r3, #8
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d010      	beq.n	8000776 <unblock_tasks+0x3e>
			if(user_tasks[i].block_count == g_tick_count){
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <unblock_tasks+0x58>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	4413      	add	r3, r2
 800075c:	3304      	adds	r3, #4
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <unblock_tasks+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d106      	bne.n	8000776 <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY;
 8000768:	4a09      	ldr	r2, [pc, #36]	; (8000790 <unblock_tasks+0x58>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4413      	add	r3, r2
 8000770:	3308      	adds	r3, #8
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<MAX_TASKS;i++){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b04      	cmp	r3, #4
 8000780:	dde0      	ble.n	8000744 <unblock_tasks+0xc>
			}
		}
	}
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000088 	.word	0x20000088
 8000794:	20000084 	.word	0x20000084

08000798 <SysTick_Handler>:

void SysTick_Handler(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	update_global_tick_count();
 800079e:	f7ff ffbd 	bl	800071c <update_global_tick_count>
	unblock_tasks();
 80007a2:	f7ff ffc9 	bl	8000738 <unblock_tasks>
	uint32_t *pICSR = (uint32_t*) 0xE000ED04;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SysTick_Handler+0x28>)
 80007a8:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	e000ed04 	.word	0xe000ed04

080007c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <ITM_SendChar+0x44>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <ITM_SendChar+0x44>)
 80007d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <ITM_SendChar+0x48>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <ITM_SendChar+0x48>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007e6:	bf00      	nop
 80007e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f8      	beq.n	80007e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	6013      	str	r3, [r2, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	e000edfc 	.word	0xe000edfc
 800080c:	e0000e00 	.word	0xe0000e00

08000810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	e00a      	b.n	8000838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000822:	f3af 8000 	nop.w
 8000826:	4601      	mov	r1, r0
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	60ba      	str	r2, [r7, #8]
 800082e:	b2ca      	uxtb	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbf0      	blt.n	8000822 <_read+0x12>
  }

  return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	e009      	b.n	8000870 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffad 	bl	80007c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	dbf1      	blt.n	800085c <_write+0x12>
  }
  return len;
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_close>:

int _close(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a8:	605a      	str	r2, [r3, #4]
  return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
	...

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f000 f846 	bl	80009a4 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20020000 	.word	0x20020000
 8000944:	00000400 	.word	0x00000400
 8000948:	200000d8 	.word	0x200000d8
 800094c:	200000f0 	.word	0x200000f0

08000950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097e:	f000 f817 	bl	80009b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fca9 	bl	80002d8 <main>

08000986 <LoopForever>:

LoopForever:
  b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000994:	080014a0 	.word	0x080014a0
  ldr r2, =_sbss
 8000998:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800099c:	200000ec 	.word	0x200000ec

080009a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <__errno>:
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <__errno+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000004 	.word	0x20000004

080009b0 <__libc_init_array>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	4d0d      	ldr	r5, [pc, #52]	; (80009e8 <__libc_init_array+0x38>)
 80009b4:	4c0d      	ldr	r4, [pc, #52]	; (80009ec <__libc_init_array+0x3c>)
 80009b6:	1b64      	subs	r4, r4, r5
 80009b8:	10a4      	asrs	r4, r4, #2
 80009ba:	2600      	movs	r6, #0
 80009bc:	42a6      	cmp	r6, r4
 80009be:	d109      	bne.n	80009d4 <__libc_init_array+0x24>
 80009c0:	4d0b      	ldr	r5, [pc, #44]	; (80009f0 <__libc_init_array+0x40>)
 80009c2:	4c0c      	ldr	r4, [pc, #48]	; (80009f4 <__libc_init_array+0x44>)
 80009c4:	f000 fd18 	bl	80013f8 <_init>
 80009c8:	1b64      	subs	r4, r4, r5
 80009ca:	10a4      	asrs	r4, r4, #2
 80009cc:	2600      	movs	r6, #0
 80009ce:	42a6      	cmp	r6, r4
 80009d0:	d105      	bne.n	80009de <__libc_init_array+0x2e>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d8:	4798      	blx	r3
 80009da:	3601      	adds	r6, #1
 80009dc:	e7ee      	b.n	80009bc <__libc_init_array+0xc>
 80009de:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e2:	4798      	blx	r3
 80009e4:	3601      	adds	r6, #1
 80009e6:	e7f2      	b.n	80009ce <__libc_init_array+0x1e>
 80009e8:	08001498 	.word	0x08001498
 80009ec:	08001498 	.word	0x08001498
 80009f0:	08001498 	.word	0x08001498
 80009f4:	0800149c 	.word	0x0800149c

080009f8 <memset>:
 80009f8:	4402      	add	r2, r0
 80009fa:	4603      	mov	r3, r0
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d100      	bne.n	8000a02 <memset+0xa>
 8000a00:	4770      	bx	lr
 8000a02:	f803 1b01 	strb.w	r1, [r3], #1
 8000a06:	e7f9      	b.n	80009fc <memset+0x4>

08000a08 <_puts_r>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	460e      	mov	r6, r1
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	b118      	cbz	r0, 8000a18 <_puts_r+0x10>
 8000a10:	6983      	ldr	r3, [r0, #24]
 8000a12:	b90b      	cbnz	r3, 8000a18 <_puts_r+0x10>
 8000a14:	f000 fa44 	bl	8000ea0 <__sinit>
 8000a18:	69ab      	ldr	r3, [r5, #24]
 8000a1a:	68ac      	ldr	r4, [r5, #8]
 8000a1c:	b913      	cbnz	r3, 8000a24 <_puts_r+0x1c>
 8000a1e:	4628      	mov	r0, r5
 8000a20:	f000 fa3e 	bl	8000ea0 <__sinit>
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <_puts_r+0xd0>)
 8000a26:	429c      	cmp	r4, r3
 8000a28:	d120      	bne.n	8000a6c <_puts_r+0x64>
 8000a2a:	686c      	ldr	r4, [r5, #4]
 8000a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a2e:	07db      	lsls	r3, r3, #31
 8000a30:	d405      	bmi.n	8000a3e <_puts_r+0x36>
 8000a32:	89a3      	ldrh	r3, [r4, #12]
 8000a34:	0598      	lsls	r0, r3, #22
 8000a36:	d402      	bmi.n	8000a3e <_puts_r+0x36>
 8000a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a3a:	f000 facf 	bl	8000fdc <__retarget_lock_acquire_recursive>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	0719      	lsls	r1, r3, #28
 8000a42:	d51d      	bpl.n	8000a80 <_puts_r+0x78>
 8000a44:	6923      	ldr	r3, [r4, #16]
 8000a46:	b1db      	cbz	r3, 8000a80 <_puts_r+0x78>
 8000a48:	3e01      	subs	r6, #1
 8000a4a:	68a3      	ldr	r3, [r4, #8]
 8000a4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a50:	3b01      	subs	r3, #1
 8000a52:	60a3      	str	r3, [r4, #8]
 8000a54:	bb39      	cbnz	r1, 8000aa6 <_puts_r+0x9e>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da38      	bge.n	8000acc <_puts_r+0xc4>
 8000a5a:	4622      	mov	r2, r4
 8000a5c:	210a      	movs	r1, #10
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 f848 	bl	8000af4 <__swbuf_r>
 8000a64:	3001      	adds	r0, #1
 8000a66:	d011      	beq.n	8000a8c <_puts_r+0x84>
 8000a68:	250a      	movs	r5, #10
 8000a6a:	e011      	b.n	8000a90 <_puts_r+0x88>
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <_puts_r+0xd4>)
 8000a6e:	429c      	cmp	r4, r3
 8000a70:	d101      	bne.n	8000a76 <_puts_r+0x6e>
 8000a72:	68ac      	ldr	r4, [r5, #8]
 8000a74:	e7da      	b.n	8000a2c <_puts_r+0x24>
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <_puts_r+0xd8>)
 8000a78:	429c      	cmp	r4, r3
 8000a7a:	bf08      	it	eq
 8000a7c:	68ec      	ldreq	r4, [r5, #12]
 8000a7e:	e7d5      	b.n	8000a2c <_puts_r+0x24>
 8000a80:	4621      	mov	r1, r4
 8000a82:	4628      	mov	r0, r5
 8000a84:	f000 f888 	bl	8000b98 <__swsetup_r>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d0dd      	beq.n	8000a48 <_puts_r+0x40>
 8000a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8000a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a92:	07da      	lsls	r2, r3, #31
 8000a94:	d405      	bmi.n	8000aa2 <_puts_r+0x9a>
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	059b      	lsls	r3, r3, #22
 8000a9a:	d402      	bmi.n	8000aa2 <_puts_r+0x9a>
 8000a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a9e:	f000 fa9e 	bl	8000fde <__retarget_lock_release_recursive>
 8000aa2:	4628      	mov	r0, r5
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	da04      	bge.n	8000ab4 <_puts_r+0xac>
 8000aaa:	69a2      	ldr	r2, [r4, #24]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dc06      	bgt.n	8000abe <_puts_r+0xb6>
 8000ab0:	290a      	cmp	r1, #10
 8000ab2:	d004      	beq.n	8000abe <_puts_r+0xb6>
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	6022      	str	r2, [r4, #0]
 8000aba:	7019      	strb	r1, [r3, #0]
 8000abc:	e7c5      	b.n	8000a4a <_puts_r+0x42>
 8000abe:	4622      	mov	r2, r4
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f000 f817 	bl	8000af4 <__swbuf_r>
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	d1bf      	bne.n	8000a4a <_puts_r+0x42>
 8000aca:	e7df      	b.n	8000a8c <_puts_r+0x84>
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	250a      	movs	r5, #10
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	6022      	str	r2, [r4, #0]
 8000ad4:	701d      	strb	r5, [r3, #0]
 8000ad6:	e7db      	b.n	8000a90 <_puts_r+0x88>
 8000ad8:	08001458 	.word	0x08001458
 8000adc:	08001478 	.word	0x08001478
 8000ae0:	08001438 	.word	0x08001438

08000ae4 <puts>:
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <puts+0xc>)
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f7ff bf8d 	b.w	8000a08 <_puts_r>
 8000aee:	bf00      	nop
 8000af0:	20000004 	.word	0x20000004

08000af4 <__swbuf_r>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	460e      	mov	r6, r1
 8000af8:	4614      	mov	r4, r2
 8000afa:	4605      	mov	r5, r0
 8000afc:	b118      	cbz	r0, 8000b06 <__swbuf_r+0x12>
 8000afe:	6983      	ldr	r3, [r0, #24]
 8000b00:	b90b      	cbnz	r3, 8000b06 <__swbuf_r+0x12>
 8000b02:	f000 f9cd 	bl	8000ea0 <__sinit>
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <__swbuf_r+0x98>)
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	d12b      	bne.n	8000b64 <__swbuf_r+0x70>
 8000b0c:	686c      	ldr	r4, [r5, #4]
 8000b0e:	69a3      	ldr	r3, [r4, #24]
 8000b10:	60a3      	str	r3, [r4, #8]
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	071a      	lsls	r2, r3, #28
 8000b16:	d52f      	bpl.n	8000b78 <__swbuf_r+0x84>
 8000b18:	6923      	ldr	r3, [r4, #16]
 8000b1a:	b36b      	cbz	r3, 8000b78 <__swbuf_r+0x84>
 8000b1c:	6923      	ldr	r3, [r4, #16]
 8000b1e:	6820      	ldr	r0, [r4, #0]
 8000b20:	1ac0      	subs	r0, r0, r3
 8000b22:	6963      	ldr	r3, [r4, #20]
 8000b24:	b2f6      	uxtb	r6, r6
 8000b26:	4283      	cmp	r3, r0
 8000b28:	4637      	mov	r7, r6
 8000b2a:	dc04      	bgt.n	8000b36 <__swbuf_r+0x42>
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 f922 	bl	8000d78 <_fflush_r>
 8000b34:	bb30      	cbnz	r0, 8000b84 <__swbuf_r+0x90>
 8000b36:	68a3      	ldr	r3, [r4, #8]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	60a3      	str	r3, [r4, #8]
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	6022      	str	r2, [r4, #0]
 8000b42:	701e      	strb	r6, [r3, #0]
 8000b44:	6963      	ldr	r3, [r4, #20]
 8000b46:	3001      	adds	r0, #1
 8000b48:	4283      	cmp	r3, r0
 8000b4a:	d004      	beq.n	8000b56 <__swbuf_r+0x62>
 8000b4c:	89a3      	ldrh	r3, [r4, #12]
 8000b4e:	07db      	lsls	r3, r3, #31
 8000b50:	d506      	bpl.n	8000b60 <__swbuf_r+0x6c>
 8000b52:	2e0a      	cmp	r6, #10
 8000b54:	d104      	bne.n	8000b60 <__swbuf_r+0x6c>
 8000b56:	4621      	mov	r1, r4
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f000 f90d 	bl	8000d78 <_fflush_r>
 8000b5e:	b988      	cbnz	r0, 8000b84 <__swbuf_r+0x90>
 8000b60:	4638      	mov	r0, r7
 8000b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <__swbuf_r+0x9c>)
 8000b66:	429c      	cmp	r4, r3
 8000b68:	d101      	bne.n	8000b6e <__swbuf_r+0x7a>
 8000b6a:	68ac      	ldr	r4, [r5, #8]
 8000b6c:	e7cf      	b.n	8000b0e <__swbuf_r+0x1a>
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <__swbuf_r+0xa0>)
 8000b70:	429c      	cmp	r4, r3
 8000b72:	bf08      	it	eq
 8000b74:	68ec      	ldreq	r4, [r5, #12]
 8000b76:	e7ca      	b.n	8000b0e <__swbuf_r+0x1a>
 8000b78:	4621      	mov	r1, r4
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 f80c 	bl	8000b98 <__swsetup_r>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d0cb      	beq.n	8000b1c <__swbuf_r+0x28>
 8000b84:	f04f 37ff 	mov.w	r7, #4294967295
 8000b88:	e7ea      	b.n	8000b60 <__swbuf_r+0x6c>
 8000b8a:	bf00      	nop
 8000b8c:	08001458 	.word	0x08001458
 8000b90:	08001478 	.word	0x08001478
 8000b94:	08001438 	.word	0x08001438

08000b98 <__swsetup_r>:
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <__swsetup_r+0xcc>)
 8000b9a:	b570      	push	{r4, r5, r6, lr}
 8000b9c:	681d      	ldr	r5, [r3, #0]
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	b125      	cbz	r5, 8000bae <__swsetup_r+0x16>
 8000ba4:	69ab      	ldr	r3, [r5, #24]
 8000ba6:	b913      	cbnz	r3, 8000bae <__swsetup_r+0x16>
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f000 f979 	bl	8000ea0 <__sinit>
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <__swsetup_r+0xd0>)
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	d10f      	bne.n	8000bd4 <__swsetup_r+0x3c>
 8000bb4:	686c      	ldr	r4, [r5, #4]
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bbc:	0719      	lsls	r1, r3, #28
 8000bbe:	d42c      	bmi.n	8000c1a <__swsetup_r+0x82>
 8000bc0:	06dd      	lsls	r5, r3, #27
 8000bc2:	d411      	bmi.n	8000be8 <__swsetup_r+0x50>
 8000bc4:	2309      	movs	r3, #9
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd2:	e03e      	b.n	8000c52 <__swsetup_r+0xba>
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <__swsetup_r+0xd4>)
 8000bd6:	429c      	cmp	r4, r3
 8000bd8:	d101      	bne.n	8000bde <__swsetup_r+0x46>
 8000bda:	68ac      	ldr	r4, [r5, #8]
 8000bdc:	e7eb      	b.n	8000bb6 <__swsetup_r+0x1e>
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <__swsetup_r+0xd8>)
 8000be0:	429c      	cmp	r4, r3
 8000be2:	bf08      	it	eq
 8000be4:	68ec      	ldreq	r4, [r5, #12]
 8000be6:	e7e6      	b.n	8000bb6 <__swsetup_r+0x1e>
 8000be8:	0758      	lsls	r0, r3, #29
 8000bea:	d512      	bpl.n	8000c12 <__swsetup_r+0x7a>
 8000bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bee:	b141      	cbz	r1, 8000c02 <__swsetup_r+0x6a>
 8000bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d002      	beq.n	8000bfe <__swsetup_r+0x66>
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f000 fa57 	bl	80010ac <_free_r>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	6363      	str	r3, [r4, #52]	; 0x34
 8000c02:	89a3      	ldrh	r3, [r4, #12]
 8000c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c08:	81a3      	strh	r3, [r4, #12]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6063      	str	r3, [r4, #4]
 8000c0e:	6923      	ldr	r3, [r4, #16]
 8000c10:	6023      	str	r3, [r4, #0]
 8000c12:	89a3      	ldrh	r3, [r4, #12]
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	81a3      	strh	r3, [r4, #12]
 8000c1a:	6923      	ldr	r3, [r4, #16]
 8000c1c:	b94b      	cbnz	r3, 8000c32 <__swsetup_r+0x9a>
 8000c1e:	89a3      	ldrh	r3, [r4, #12]
 8000c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c28:	d003      	beq.n	8000c32 <__swsetup_r+0x9a>
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	4630      	mov	r0, r6
 8000c2e:	f000 f9fd 	bl	800102c <__smakebuf_r>
 8000c32:	89a0      	ldrh	r0, [r4, #12]
 8000c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c38:	f010 0301 	ands.w	r3, r0, #1
 8000c3c:	d00a      	beq.n	8000c54 <__swsetup_r+0xbc>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60a3      	str	r3, [r4, #8]
 8000c42:	6963      	ldr	r3, [r4, #20]
 8000c44:	425b      	negs	r3, r3
 8000c46:	61a3      	str	r3, [r4, #24]
 8000c48:	6923      	ldr	r3, [r4, #16]
 8000c4a:	b943      	cbnz	r3, 8000c5e <__swsetup_r+0xc6>
 8000c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c50:	d1ba      	bne.n	8000bc8 <__swsetup_r+0x30>
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
 8000c54:	0781      	lsls	r1, r0, #30
 8000c56:	bf58      	it	pl
 8000c58:	6963      	ldrpl	r3, [r4, #20]
 8000c5a:	60a3      	str	r3, [r4, #8]
 8000c5c:	e7f4      	b.n	8000c48 <__swsetup_r+0xb0>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e7f7      	b.n	8000c52 <__swsetup_r+0xba>
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004
 8000c68:	08001458 	.word	0x08001458
 8000c6c:	08001478 	.word	0x08001478
 8000c70:	08001438 	.word	0x08001438

08000c74 <__sflush_r>:
 8000c74:	898a      	ldrh	r2, [r1, #12]
 8000c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c78:	4605      	mov	r5, r0
 8000c7a:	0710      	lsls	r0, r2, #28
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	d457      	bmi.n	8000d30 <__sflush_r+0xbc>
 8000c80:	684b      	ldr	r3, [r1, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	dc04      	bgt.n	8000c90 <__sflush_r+0x1c>
 8000c86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dc01      	bgt.n	8000c90 <__sflush_r+0x1c>
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d0fa      	beq.n	8000c8c <__sflush_r+0x18>
 8000c96:	2300      	movs	r3, #0
 8000c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c9c:	682f      	ldr	r7, [r5, #0]
 8000c9e:	602b      	str	r3, [r5, #0]
 8000ca0:	d032      	beq.n	8000d08 <__sflush_r+0x94>
 8000ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ca4:	89a3      	ldrh	r3, [r4, #12]
 8000ca6:	075a      	lsls	r2, r3, #29
 8000ca8:	d505      	bpl.n	8000cb6 <__sflush_r+0x42>
 8000caa:	6863      	ldr	r3, [r4, #4]
 8000cac:	1ac0      	subs	r0, r0, r3
 8000cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cb0:	b10b      	cbz	r3, 8000cb6 <__sflush_r+0x42>
 8000cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cb4:	1ac0      	subs	r0, r0, r3
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	4602      	mov	r2, r0
 8000cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cbc:	6a21      	ldr	r1, [r4, #32]
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	47b0      	blx	r6
 8000cc2:	1c43      	adds	r3, r0, #1
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	d106      	bne.n	8000cd6 <__sflush_r+0x62>
 8000cc8:	6829      	ldr	r1, [r5, #0]
 8000cca:	291d      	cmp	r1, #29
 8000ccc:	d82c      	bhi.n	8000d28 <__sflush_r+0xb4>
 8000cce:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <__sflush_r+0x100>)
 8000cd0:	40ca      	lsrs	r2, r1
 8000cd2:	07d6      	lsls	r6, r2, #31
 8000cd4:	d528      	bpl.n	8000d28 <__sflush_r+0xb4>
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	6062      	str	r2, [r4, #4]
 8000cda:	04d9      	lsls	r1, r3, #19
 8000cdc:	6922      	ldr	r2, [r4, #16]
 8000cde:	6022      	str	r2, [r4, #0]
 8000ce0:	d504      	bpl.n	8000cec <__sflush_r+0x78>
 8000ce2:	1c42      	adds	r2, r0, #1
 8000ce4:	d101      	bne.n	8000cea <__sflush_r+0x76>
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	b903      	cbnz	r3, 8000cec <__sflush_r+0x78>
 8000cea:	6560      	str	r0, [r4, #84]	; 0x54
 8000cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cee:	602f      	str	r7, [r5, #0]
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d0cb      	beq.n	8000c8c <__sflush_r+0x18>
 8000cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d002      	beq.n	8000d02 <__sflush_r+0x8e>
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	f000 f9d5 	bl	80010ac <_free_r>
 8000d02:	2000      	movs	r0, #0
 8000d04:	6360      	str	r0, [r4, #52]	; 0x34
 8000d06:	e7c2      	b.n	8000c8e <__sflush_r+0x1a>
 8000d08:	6a21      	ldr	r1, [r4, #32]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	47b0      	blx	r6
 8000d10:	1c41      	adds	r1, r0, #1
 8000d12:	d1c7      	bne.n	8000ca4 <__sflush_r+0x30>
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0c4      	beq.n	8000ca4 <__sflush_r+0x30>
 8000d1a:	2b1d      	cmp	r3, #29
 8000d1c:	d001      	beq.n	8000d22 <__sflush_r+0xae>
 8000d1e:	2b16      	cmp	r3, #22
 8000d20:	d101      	bne.n	8000d26 <__sflush_r+0xb2>
 8000d22:	602f      	str	r7, [r5, #0]
 8000d24:	e7b2      	b.n	8000c8c <__sflush_r+0x18>
 8000d26:	89a3      	ldrh	r3, [r4, #12]
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	81a3      	strh	r3, [r4, #12]
 8000d2e:	e7ae      	b.n	8000c8e <__sflush_r+0x1a>
 8000d30:	690f      	ldr	r7, [r1, #16]
 8000d32:	2f00      	cmp	r7, #0
 8000d34:	d0aa      	beq.n	8000c8c <__sflush_r+0x18>
 8000d36:	0793      	lsls	r3, r2, #30
 8000d38:	680e      	ldr	r6, [r1, #0]
 8000d3a:	bf08      	it	eq
 8000d3c:	694b      	ldreq	r3, [r1, #20]
 8000d3e:	600f      	str	r7, [r1, #0]
 8000d40:	bf18      	it	ne
 8000d42:	2300      	movne	r3, #0
 8000d44:	1bf6      	subs	r6, r6, r7
 8000d46:	608b      	str	r3, [r1, #8]
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	dd9f      	ble.n	8000c8c <__sflush_r+0x18>
 8000d4c:	6a21      	ldr	r1, [r4, #32]
 8000d4e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000d52:	4633      	mov	r3, r6
 8000d54:	463a      	mov	r2, r7
 8000d56:	4628      	mov	r0, r5
 8000d58:	47e0      	blx	ip
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	dc06      	bgt.n	8000d6c <__sflush_r+0xf8>
 8000d5e:	89a3      	ldrh	r3, [r4, #12]
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	81a3      	strh	r3, [r4, #12]
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	e790      	b.n	8000c8e <__sflush_r+0x1a>
 8000d6c:	4407      	add	r7, r0
 8000d6e:	1a36      	subs	r6, r6, r0
 8000d70:	e7ea      	b.n	8000d48 <__sflush_r+0xd4>
 8000d72:	bf00      	nop
 8000d74:	20400001 	.word	0x20400001

08000d78 <_fflush_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	690b      	ldr	r3, [r1, #16]
 8000d7c:	4605      	mov	r5, r0
 8000d7e:	460c      	mov	r4, r1
 8000d80:	b913      	cbnz	r3, 8000d88 <_fflush_r+0x10>
 8000d82:	2500      	movs	r5, #0
 8000d84:	4628      	mov	r0, r5
 8000d86:	bd38      	pop	{r3, r4, r5, pc}
 8000d88:	b118      	cbz	r0, 8000d92 <_fflush_r+0x1a>
 8000d8a:	6983      	ldr	r3, [r0, #24]
 8000d8c:	b90b      	cbnz	r3, 8000d92 <_fflush_r+0x1a>
 8000d8e:	f000 f887 	bl	8000ea0 <__sinit>
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <_fflush_r+0x6c>)
 8000d94:	429c      	cmp	r4, r3
 8000d96:	d11b      	bne.n	8000dd0 <_fflush_r+0x58>
 8000d98:	686c      	ldr	r4, [r5, #4]
 8000d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0ef      	beq.n	8000d82 <_fflush_r+0xa>
 8000da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000da4:	07d0      	lsls	r0, r2, #31
 8000da6:	d404      	bmi.n	8000db2 <_fflush_r+0x3a>
 8000da8:	0599      	lsls	r1, r3, #22
 8000daa:	d402      	bmi.n	8000db2 <_fflush_r+0x3a>
 8000dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dae:	f000 f915 	bl	8000fdc <__retarget_lock_acquire_recursive>
 8000db2:	4628      	mov	r0, r5
 8000db4:	4621      	mov	r1, r4
 8000db6:	f7ff ff5d 	bl	8000c74 <__sflush_r>
 8000dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dbc:	07da      	lsls	r2, r3, #31
 8000dbe:	4605      	mov	r5, r0
 8000dc0:	d4e0      	bmi.n	8000d84 <_fflush_r+0xc>
 8000dc2:	89a3      	ldrh	r3, [r4, #12]
 8000dc4:	059b      	lsls	r3, r3, #22
 8000dc6:	d4dd      	bmi.n	8000d84 <_fflush_r+0xc>
 8000dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dca:	f000 f908 	bl	8000fde <__retarget_lock_release_recursive>
 8000dce:	e7d9      	b.n	8000d84 <_fflush_r+0xc>
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <_fflush_r+0x70>)
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	d101      	bne.n	8000dda <_fflush_r+0x62>
 8000dd6:	68ac      	ldr	r4, [r5, #8]
 8000dd8:	e7df      	b.n	8000d9a <_fflush_r+0x22>
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <_fflush_r+0x74>)
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	bf08      	it	eq
 8000de0:	68ec      	ldreq	r4, [r5, #12]
 8000de2:	e7da      	b.n	8000d9a <_fflush_r+0x22>
 8000de4:	08001458 	.word	0x08001458
 8000de8:	08001478 	.word	0x08001478
 8000dec:	08001438 	.word	0x08001438

08000df0 <std>:
 8000df0:	2300      	movs	r3, #0
 8000df2:	b510      	push	{r4, lr}
 8000df4:	4604      	mov	r4, r0
 8000df6:	e9c0 3300 	strd	r3, r3, [r0]
 8000dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dfe:	6083      	str	r3, [r0, #8]
 8000e00:	8181      	strh	r1, [r0, #12]
 8000e02:	6643      	str	r3, [r0, #100]	; 0x64
 8000e04:	81c2      	strh	r2, [r0, #14]
 8000e06:	6183      	str	r3, [r0, #24]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	305c      	adds	r0, #92	; 0x5c
 8000e0e:	f7ff fdf3 	bl	80009f8 <memset>
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <std+0x38>)
 8000e14:	6263      	str	r3, [r4, #36]	; 0x24
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <std+0x3c>)
 8000e18:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <std+0x40>)
 8000e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <std+0x44>)
 8000e20:	6224      	str	r4, [r4, #32]
 8000e22:	6323      	str	r3, [r4, #48]	; 0x30
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	bf00      	nop
 8000e28:	08001289 	.word	0x08001289
 8000e2c:	080012ab 	.word	0x080012ab
 8000e30:	080012e3 	.word	0x080012e3
 8000e34:	08001307 	.word	0x08001307

08000e38 <_cleanup_r>:
 8000e38:	4901      	ldr	r1, [pc, #4]	; (8000e40 <_cleanup_r+0x8>)
 8000e3a:	f000 b8af 	b.w	8000f9c <_fwalk_reent>
 8000e3e:	bf00      	nop
 8000e40:	08000d79 	.word	0x08000d79

08000e44 <__sfmoreglue>:
 8000e44:	b570      	push	{r4, r5, r6, lr}
 8000e46:	2268      	movs	r2, #104	; 0x68
 8000e48:	1e4d      	subs	r5, r1, #1
 8000e4a:	4355      	muls	r5, r2
 8000e4c:	460e      	mov	r6, r1
 8000e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e52:	f000 f995 	bl	8001180 <_malloc_r>
 8000e56:	4604      	mov	r4, r0
 8000e58:	b140      	cbz	r0, 8000e6c <__sfmoreglue+0x28>
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8000e60:	300c      	adds	r0, #12
 8000e62:	60a0      	str	r0, [r4, #8]
 8000e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e68:	f7ff fdc6 	bl	80009f8 <memset>
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}

08000e70 <__sfp_lock_acquire>:
 8000e70:	4801      	ldr	r0, [pc, #4]	; (8000e78 <__sfp_lock_acquire+0x8>)
 8000e72:	f000 b8b3 	b.w	8000fdc <__retarget_lock_acquire_recursive>
 8000e76:	bf00      	nop
 8000e78:	200000dd 	.word	0x200000dd

08000e7c <__sfp_lock_release>:
 8000e7c:	4801      	ldr	r0, [pc, #4]	; (8000e84 <__sfp_lock_release+0x8>)
 8000e7e:	f000 b8ae 	b.w	8000fde <__retarget_lock_release_recursive>
 8000e82:	bf00      	nop
 8000e84:	200000dd 	.word	0x200000dd

08000e88 <__sinit_lock_acquire>:
 8000e88:	4801      	ldr	r0, [pc, #4]	; (8000e90 <__sinit_lock_acquire+0x8>)
 8000e8a:	f000 b8a7 	b.w	8000fdc <__retarget_lock_acquire_recursive>
 8000e8e:	bf00      	nop
 8000e90:	200000de 	.word	0x200000de

08000e94 <__sinit_lock_release>:
 8000e94:	4801      	ldr	r0, [pc, #4]	; (8000e9c <__sinit_lock_release+0x8>)
 8000e96:	f000 b8a2 	b.w	8000fde <__retarget_lock_release_recursive>
 8000e9a:	bf00      	nop
 8000e9c:	200000de 	.word	0x200000de

08000ea0 <__sinit>:
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	f7ff fff0 	bl	8000e88 <__sinit_lock_acquire>
 8000ea8:	69a3      	ldr	r3, [r4, #24]
 8000eaa:	b11b      	cbz	r3, 8000eb4 <__sinit+0x14>
 8000eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eb0:	f7ff bff0 	b.w	8000e94 <__sinit_lock_release>
 8000eb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000eb8:	6523      	str	r3, [r4, #80]	; 0x50
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <__sinit+0x68>)
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <__sinit+0x6c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ec2:	42a3      	cmp	r3, r4
 8000ec4:	bf04      	itt	eq
 8000ec6:	2301      	moveq	r3, #1
 8000ec8:	61a3      	streq	r3, [r4, #24]
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f000 f820 	bl	8000f10 <__sfp>
 8000ed0:	6060      	str	r0, [r4, #4]
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f000 f81c 	bl	8000f10 <__sfp>
 8000ed8:	60a0      	str	r0, [r4, #8]
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f818 	bl	8000f10 <__sfp>
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60e0      	str	r0, [r4, #12]
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	6860      	ldr	r0, [r4, #4]
 8000ee8:	f7ff ff82 	bl	8000df0 <std>
 8000eec:	68a0      	ldr	r0, [r4, #8]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2109      	movs	r1, #9
 8000ef2:	f7ff ff7d 	bl	8000df0 <std>
 8000ef6:	68e0      	ldr	r0, [r4, #12]
 8000ef8:	2202      	movs	r2, #2
 8000efa:	2112      	movs	r1, #18
 8000efc:	f7ff ff78 	bl	8000df0 <std>
 8000f00:	2301      	movs	r3, #1
 8000f02:	61a3      	str	r3, [r4, #24]
 8000f04:	e7d2      	b.n	8000eac <__sinit+0xc>
 8000f06:	bf00      	nop
 8000f08:	08001434 	.word	0x08001434
 8000f0c:	08000e39 	.word	0x08000e39

08000f10 <__sfp>:
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f12:	4607      	mov	r7, r0
 8000f14:	f7ff ffac 	bl	8000e70 <__sfp_lock_acquire>
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <__sfp+0x84>)
 8000f1a:	681e      	ldr	r6, [r3, #0]
 8000f1c:	69b3      	ldr	r3, [r6, #24]
 8000f1e:	b913      	cbnz	r3, 8000f26 <__sfp+0x16>
 8000f20:	4630      	mov	r0, r6
 8000f22:	f7ff ffbd 	bl	8000ea0 <__sinit>
 8000f26:	3648      	adds	r6, #72	; 0x48
 8000f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	d503      	bpl.n	8000f38 <__sfp+0x28>
 8000f30:	6833      	ldr	r3, [r6, #0]
 8000f32:	b30b      	cbz	r3, 8000f78 <__sfp+0x68>
 8000f34:	6836      	ldr	r6, [r6, #0]
 8000f36:	e7f7      	b.n	8000f28 <__sfp+0x18>
 8000f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f3c:	b9d5      	cbnz	r5, 8000f74 <__sfp+0x64>
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <__sfp+0x88>)
 8000f40:	60e3      	str	r3, [r4, #12]
 8000f42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f46:	6665      	str	r5, [r4, #100]	; 0x64
 8000f48:	f000 f847 	bl	8000fda <__retarget_lock_init_recursive>
 8000f4c:	f7ff ff96 	bl	8000e7c <__sfp_lock_release>
 8000f50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f58:	6025      	str	r5, [r4, #0]
 8000f5a:	61a5      	str	r5, [r4, #24]
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	4629      	mov	r1, r5
 8000f60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f64:	f7ff fd48 	bl	80009f8 <memset>
 8000f68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f70:	4620      	mov	r0, r4
 8000f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f74:	3468      	adds	r4, #104	; 0x68
 8000f76:	e7d9      	b.n	8000f2c <__sfp+0x1c>
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	f7ff ff62 	bl	8000e44 <__sfmoreglue>
 8000f80:	4604      	mov	r4, r0
 8000f82:	6030      	str	r0, [r6, #0]
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d1d5      	bne.n	8000f34 <__sfp+0x24>
 8000f88:	f7ff ff78 	bl	8000e7c <__sfp_lock_release>
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	e7ee      	b.n	8000f70 <__sfp+0x60>
 8000f92:	bf00      	nop
 8000f94:	08001434 	.word	0x08001434
 8000f98:	ffff0001 	.word	0xffff0001

08000f9c <_fwalk_reent>:
 8000f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	4688      	mov	r8, r1
 8000fa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fa8:	2700      	movs	r7, #0
 8000faa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fae:	f1b9 0901 	subs.w	r9, r9, #1
 8000fb2:	d505      	bpl.n	8000fc0 <_fwalk_reent+0x24>
 8000fb4:	6824      	ldr	r4, [r4, #0]
 8000fb6:	2c00      	cmp	r4, #0
 8000fb8:	d1f7      	bne.n	8000faa <_fwalk_reent+0xe>
 8000fba:	4638      	mov	r0, r7
 8000fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fc0:	89ab      	ldrh	r3, [r5, #12]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d907      	bls.n	8000fd6 <_fwalk_reent+0x3a>
 8000fc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	d003      	beq.n	8000fd6 <_fwalk_reent+0x3a>
 8000fce:	4629      	mov	r1, r5
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	47c0      	blx	r8
 8000fd4:	4307      	orrs	r7, r0
 8000fd6:	3568      	adds	r5, #104	; 0x68
 8000fd8:	e7e9      	b.n	8000fae <_fwalk_reent+0x12>

08000fda <__retarget_lock_init_recursive>:
 8000fda:	4770      	bx	lr

08000fdc <__retarget_lock_acquire_recursive>:
 8000fdc:	4770      	bx	lr

08000fde <__retarget_lock_release_recursive>:
 8000fde:	4770      	bx	lr

08000fe0 <__swhatbuf_r>:
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	460e      	mov	r6, r1
 8000fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	b096      	sub	sp, #88	; 0x58
 8000fec:	4614      	mov	r4, r2
 8000fee:	461d      	mov	r5, r3
 8000ff0:	da08      	bge.n	8001004 <__swhatbuf_r+0x24>
 8000ff2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	602a      	str	r2, [r5, #0]
 8000ffa:	061a      	lsls	r2, r3, #24
 8000ffc:	d410      	bmi.n	8001020 <__swhatbuf_r+0x40>
 8000ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001002:	e00e      	b.n	8001022 <__swhatbuf_r+0x42>
 8001004:	466a      	mov	r2, sp
 8001006:	f000 f9a5 	bl	8001354 <_fstat_r>
 800100a:	2800      	cmp	r0, #0
 800100c:	dbf1      	blt.n	8000ff2 <__swhatbuf_r+0x12>
 800100e:	9a01      	ldr	r2, [sp, #4]
 8001010:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001014:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001018:	425a      	negs	r2, r3
 800101a:	415a      	adcs	r2, r3
 800101c:	602a      	str	r2, [r5, #0]
 800101e:	e7ee      	b.n	8000ffe <__swhatbuf_r+0x1e>
 8001020:	2340      	movs	r3, #64	; 0x40
 8001022:	2000      	movs	r0, #0
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	b016      	add	sp, #88	; 0x58
 8001028:	bd70      	pop	{r4, r5, r6, pc}
	...

0800102c <__smakebuf_r>:
 800102c:	898b      	ldrh	r3, [r1, #12]
 800102e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001030:	079d      	lsls	r5, r3, #30
 8001032:	4606      	mov	r6, r0
 8001034:	460c      	mov	r4, r1
 8001036:	d507      	bpl.n	8001048 <__smakebuf_r+0x1c>
 8001038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	6123      	str	r3, [r4, #16]
 8001040:	2301      	movs	r3, #1
 8001042:	6163      	str	r3, [r4, #20]
 8001044:	b002      	add	sp, #8
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	ab01      	add	r3, sp, #4
 800104a:	466a      	mov	r2, sp
 800104c:	f7ff ffc8 	bl	8000fe0 <__swhatbuf_r>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	4605      	mov	r5, r0
 8001054:	4630      	mov	r0, r6
 8001056:	f000 f893 	bl	8001180 <_malloc_r>
 800105a:	b948      	cbnz	r0, 8001070 <__smakebuf_r+0x44>
 800105c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001060:	059a      	lsls	r2, r3, #22
 8001062:	d4ef      	bmi.n	8001044 <__smakebuf_r+0x18>
 8001064:	f023 0303 	bic.w	r3, r3, #3
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	81a3      	strh	r3, [r4, #12]
 800106e:	e7e3      	b.n	8001038 <__smakebuf_r+0xc>
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <__smakebuf_r+0x7c>)
 8001072:	62b3      	str	r3, [r6, #40]	; 0x28
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	6020      	str	r0, [r4, #0]
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	81a3      	strh	r3, [r4, #12]
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	6163      	str	r3, [r4, #20]
 8001082:	9b01      	ldr	r3, [sp, #4]
 8001084:	6120      	str	r0, [r4, #16]
 8001086:	b15b      	cbz	r3, 80010a0 <__smakebuf_r+0x74>
 8001088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800108c:	4630      	mov	r0, r6
 800108e:	f000 f973 	bl	8001378 <_isatty_r>
 8001092:	b128      	cbz	r0, 80010a0 <__smakebuf_r+0x74>
 8001094:	89a3      	ldrh	r3, [r4, #12]
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	81a3      	strh	r3, [r4, #12]
 80010a0:	89a0      	ldrh	r0, [r4, #12]
 80010a2:	4305      	orrs	r5, r0
 80010a4:	81a5      	strh	r5, [r4, #12]
 80010a6:	e7cd      	b.n	8001044 <__smakebuf_r+0x18>
 80010a8:	08000e39 	.word	0x08000e39

080010ac <_free_r>:
 80010ac:	b538      	push	{r3, r4, r5, lr}
 80010ae:	4605      	mov	r5, r0
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d041      	beq.n	8001138 <_free_r+0x8c>
 80010b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010b8:	1f0c      	subs	r4, r1, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfb8      	it	lt
 80010be:	18e4      	addlt	r4, r4, r3
 80010c0:	f000 f97c 	bl	80013bc <__malloc_lock>
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <_free_r+0x90>)
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	b933      	cbnz	r3, 80010d8 <_free_r+0x2c>
 80010ca:	6063      	str	r3, [r4, #4]
 80010cc:	6014      	str	r4, [r2, #0]
 80010ce:	4628      	mov	r0, r5
 80010d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010d4:	f000 b978 	b.w	80013c8 <__malloc_unlock>
 80010d8:	42a3      	cmp	r3, r4
 80010da:	d908      	bls.n	80010ee <_free_r+0x42>
 80010dc:	6820      	ldr	r0, [r4, #0]
 80010de:	1821      	adds	r1, r4, r0
 80010e0:	428b      	cmp	r3, r1
 80010e2:	bf01      	itttt	eq
 80010e4:	6819      	ldreq	r1, [r3, #0]
 80010e6:	685b      	ldreq	r3, [r3, #4]
 80010e8:	1809      	addeq	r1, r1, r0
 80010ea:	6021      	streq	r1, [r4, #0]
 80010ec:	e7ed      	b.n	80010ca <_free_r+0x1e>
 80010ee:	461a      	mov	r2, r3
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	b10b      	cbz	r3, 80010f8 <_free_r+0x4c>
 80010f4:	42a3      	cmp	r3, r4
 80010f6:	d9fa      	bls.n	80010ee <_free_r+0x42>
 80010f8:	6811      	ldr	r1, [r2, #0]
 80010fa:	1850      	adds	r0, r2, r1
 80010fc:	42a0      	cmp	r0, r4
 80010fe:	d10b      	bne.n	8001118 <_free_r+0x6c>
 8001100:	6820      	ldr	r0, [r4, #0]
 8001102:	4401      	add	r1, r0
 8001104:	1850      	adds	r0, r2, r1
 8001106:	4283      	cmp	r3, r0
 8001108:	6011      	str	r1, [r2, #0]
 800110a:	d1e0      	bne.n	80010ce <_free_r+0x22>
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	6053      	str	r3, [r2, #4]
 8001112:	4401      	add	r1, r0
 8001114:	6011      	str	r1, [r2, #0]
 8001116:	e7da      	b.n	80010ce <_free_r+0x22>
 8001118:	d902      	bls.n	8001120 <_free_r+0x74>
 800111a:	230c      	movs	r3, #12
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	e7d6      	b.n	80010ce <_free_r+0x22>
 8001120:	6820      	ldr	r0, [r4, #0]
 8001122:	1821      	adds	r1, r4, r0
 8001124:	428b      	cmp	r3, r1
 8001126:	bf04      	itt	eq
 8001128:	6819      	ldreq	r1, [r3, #0]
 800112a:	685b      	ldreq	r3, [r3, #4]
 800112c:	6063      	str	r3, [r4, #4]
 800112e:	bf04      	itt	eq
 8001130:	1809      	addeq	r1, r1, r0
 8001132:	6021      	streq	r1, [r4, #0]
 8001134:	6054      	str	r4, [r2, #4]
 8001136:	e7ca      	b.n	80010ce <_free_r+0x22>
 8001138:	bd38      	pop	{r3, r4, r5, pc}
 800113a:	bf00      	nop
 800113c:	200000e0 	.word	0x200000e0

08001140 <sbrk_aligned>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	4e0e      	ldr	r6, [pc, #56]	; (800117c <sbrk_aligned+0x3c>)
 8001144:	460c      	mov	r4, r1
 8001146:	6831      	ldr	r1, [r6, #0]
 8001148:	4605      	mov	r5, r0
 800114a:	b911      	cbnz	r1, 8001152 <sbrk_aligned+0x12>
 800114c:	f000 f88c 	bl	8001268 <_sbrk_r>
 8001150:	6030      	str	r0, [r6, #0]
 8001152:	4621      	mov	r1, r4
 8001154:	4628      	mov	r0, r5
 8001156:	f000 f887 	bl	8001268 <_sbrk_r>
 800115a:	1c43      	adds	r3, r0, #1
 800115c:	d00a      	beq.n	8001174 <sbrk_aligned+0x34>
 800115e:	1cc4      	adds	r4, r0, #3
 8001160:	f024 0403 	bic.w	r4, r4, #3
 8001164:	42a0      	cmp	r0, r4
 8001166:	d007      	beq.n	8001178 <sbrk_aligned+0x38>
 8001168:	1a21      	subs	r1, r4, r0
 800116a:	4628      	mov	r0, r5
 800116c:	f000 f87c 	bl	8001268 <_sbrk_r>
 8001170:	3001      	adds	r0, #1
 8001172:	d101      	bne.n	8001178 <sbrk_aligned+0x38>
 8001174:	f04f 34ff 	mov.w	r4, #4294967295
 8001178:	4620      	mov	r0, r4
 800117a:	bd70      	pop	{r4, r5, r6, pc}
 800117c:	200000e4 	.word	0x200000e4

08001180 <_malloc_r>:
 8001180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001184:	1ccd      	adds	r5, r1, #3
 8001186:	f025 0503 	bic.w	r5, r5, #3
 800118a:	3508      	adds	r5, #8
 800118c:	2d0c      	cmp	r5, #12
 800118e:	bf38      	it	cc
 8001190:	250c      	movcc	r5, #12
 8001192:	2d00      	cmp	r5, #0
 8001194:	4607      	mov	r7, r0
 8001196:	db01      	blt.n	800119c <_malloc_r+0x1c>
 8001198:	42a9      	cmp	r1, r5
 800119a:	d905      	bls.n	80011a8 <_malloc_r+0x28>
 800119c:	230c      	movs	r3, #12
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	2600      	movs	r6, #0
 80011a2:	4630      	mov	r0, r6
 80011a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a8:	4e2e      	ldr	r6, [pc, #184]	; (8001264 <_malloc_r+0xe4>)
 80011aa:	f000 f907 	bl	80013bc <__malloc_lock>
 80011ae:	6833      	ldr	r3, [r6, #0]
 80011b0:	461c      	mov	r4, r3
 80011b2:	bb34      	cbnz	r4, 8001202 <_malloc_r+0x82>
 80011b4:	4629      	mov	r1, r5
 80011b6:	4638      	mov	r0, r7
 80011b8:	f7ff ffc2 	bl	8001140 <sbrk_aligned>
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	4604      	mov	r4, r0
 80011c0:	d14d      	bne.n	800125e <_malloc_r+0xde>
 80011c2:	6834      	ldr	r4, [r6, #0]
 80011c4:	4626      	mov	r6, r4
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d140      	bne.n	800124c <_malloc_r+0xcc>
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	4631      	mov	r1, r6
 80011ce:	4638      	mov	r0, r7
 80011d0:	eb04 0803 	add.w	r8, r4, r3
 80011d4:	f000 f848 	bl	8001268 <_sbrk_r>
 80011d8:	4580      	cmp	r8, r0
 80011da:	d13a      	bne.n	8001252 <_malloc_r+0xd2>
 80011dc:	6821      	ldr	r1, [r4, #0]
 80011de:	3503      	adds	r5, #3
 80011e0:	1a6d      	subs	r5, r5, r1
 80011e2:	f025 0503 	bic.w	r5, r5, #3
 80011e6:	3508      	adds	r5, #8
 80011e8:	2d0c      	cmp	r5, #12
 80011ea:	bf38      	it	cc
 80011ec:	250c      	movcc	r5, #12
 80011ee:	4629      	mov	r1, r5
 80011f0:	4638      	mov	r0, r7
 80011f2:	f7ff ffa5 	bl	8001140 <sbrk_aligned>
 80011f6:	3001      	adds	r0, #1
 80011f8:	d02b      	beq.n	8001252 <_malloc_r+0xd2>
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	442b      	add	r3, r5
 80011fe:	6023      	str	r3, [r4, #0]
 8001200:	e00e      	b.n	8001220 <_malloc_r+0xa0>
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	1b52      	subs	r2, r2, r5
 8001206:	d41e      	bmi.n	8001246 <_malloc_r+0xc6>
 8001208:	2a0b      	cmp	r2, #11
 800120a:	d916      	bls.n	800123a <_malloc_r+0xba>
 800120c:	1961      	adds	r1, r4, r5
 800120e:	42a3      	cmp	r3, r4
 8001210:	6025      	str	r5, [r4, #0]
 8001212:	bf18      	it	ne
 8001214:	6059      	strne	r1, [r3, #4]
 8001216:	6863      	ldr	r3, [r4, #4]
 8001218:	bf08      	it	eq
 800121a:	6031      	streq	r1, [r6, #0]
 800121c:	5162      	str	r2, [r4, r5]
 800121e:	604b      	str	r3, [r1, #4]
 8001220:	4638      	mov	r0, r7
 8001222:	f104 060b 	add.w	r6, r4, #11
 8001226:	f000 f8cf 	bl	80013c8 <__malloc_unlock>
 800122a:	f026 0607 	bic.w	r6, r6, #7
 800122e:	1d23      	adds	r3, r4, #4
 8001230:	1af2      	subs	r2, r6, r3
 8001232:	d0b6      	beq.n	80011a2 <_malloc_r+0x22>
 8001234:	1b9b      	subs	r3, r3, r6
 8001236:	50a3      	str	r3, [r4, r2]
 8001238:	e7b3      	b.n	80011a2 <_malloc_r+0x22>
 800123a:	6862      	ldr	r2, [r4, #4]
 800123c:	42a3      	cmp	r3, r4
 800123e:	bf0c      	ite	eq
 8001240:	6032      	streq	r2, [r6, #0]
 8001242:	605a      	strne	r2, [r3, #4]
 8001244:	e7ec      	b.n	8001220 <_malloc_r+0xa0>
 8001246:	4623      	mov	r3, r4
 8001248:	6864      	ldr	r4, [r4, #4]
 800124a:	e7b2      	b.n	80011b2 <_malloc_r+0x32>
 800124c:	4634      	mov	r4, r6
 800124e:	6876      	ldr	r6, [r6, #4]
 8001250:	e7b9      	b.n	80011c6 <_malloc_r+0x46>
 8001252:	230c      	movs	r3, #12
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4638      	mov	r0, r7
 8001258:	f000 f8b6 	bl	80013c8 <__malloc_unlock>
 800125c:	e7a1      	b.n	80011a2 <_malloc_r+0x22>
 800125e:	6025      	str	r5, [r4, #0]
 8001260:	e7de      	b.n	8001220 <_malloc_r+0xa0>
 8001262:	bf00      	nop
 8001264:	200000e0 	.word	0x200000e0

08001268 <_sbrk_r>:
 8001268:	b538      	push	{r3, r4, r5, lr}
 800126a:	4d06      	ldr	r5, [pc, #24]	; (8001284 <_sbrk_r+0x1c>)
 800126c:	2300      	movs	r3, #0
 800126e:	4604      	mov	r4, r0
 8001270:	4608      	mov	r0, r1
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	f7ff fb36 	bl	80008e4 <_sbrk>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_sbrk_r+0x1a>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	b103      	cbz	r3, 8001282 <_sbrk_r+0x1a>
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	200000e8 	.word	0x200000e8

08001288 <__sread>:
 8001288:	b510      	push	{r4, lr}
 800128a:	460c      	mov	r4, r1
 800128c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001290:	f000 f8a0 	bl	80013d4 <_read_r>
 8001294:	2800      	cmp	r0, #0
 8001296:	bfab      	itete	ge
 8001298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800129a:	89a3      	ldrhlt	r3, [r4, #12]
 800129c:	181b      	addge	r3, r3, r0
 800129e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012a2:	bfac      	ite	ge
 80012a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80012a6:	81a3      	strhlt	r3, [r4, #12]
 80012a8:	bd10      	pop	{r4, pc}

080012aa <__swrite>:
 80012aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ae:	461f      	mov	r7, r3
 80012b0:	898b      	ldrh	r3, [r1, #12]
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	4605      	mov	r5, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4616      	mov	r6, r2
 80012ba:	d505      	bpl.n	80012c8 <__swrite+0x1e>
 80012bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c0:	2302      	movs	r3, #2
 80012c2:	2200      	movs	r2, #0
 80012c4:	f000 f868 	bl	8001398 <_lseek_r>
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012d2:	81a3      	strh	r3, [r4, #12]
 80012d4:	4632      	mov	r2, r6
 80012d6:	463b      	mov	r3, r7
 80012d8:	4628      	mov	r0, r5
 80012da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012de:	f000 b817 	b.w	8001310 <_write_r>

080012e2 <__sseek>:
 80012e2:	b510      	push	{r4, lr}
 80012e4:	460c      	mov	r4, r1
 80012e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ea:	f000 f855 	bl	8001398 <_lseek_r>
 80012ee:	1c43      	adds	r3, r0, #1
 80012f0:	89a3      	ldrh	r3, [r4, #12]
 80012f2:	bf15      	itete	ne
 80012f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80012f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80012fe:	81a3      	strheq	r3, [r4, #12]
 8001300:	bf18      	it	ne
 8001302:	81a3      	strhne	r3, [r4, #12]
 8001304:	bd10      	pop	{r4, pc}

08001306 <__sclose>:
 8001306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800130a:	f000 b813 	b.w	8001334 <_close_r>
	...

08001310 <_write_r>:
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	4d07      	ldr	r5, [pc, #28]	; (8001330 <_write_r+0x20>)
 8001314:	4604      	mov	r4, r0
 8001316:	4608      	mov	r0, r1
 8001318:	4611      	mov	r1, r2
 800131a:	2200      	movs	r2, #0
 800131c:	602a      	str	r2, [r5, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	f7ff fa93 	bl	800084a <_write>
 8001324:	1c43      	adds	r3, r0, #1
 8001326:	d102      	bne.n	800132e <_write_r+0x1e>
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	b103      	cbz	r3, 800132e <_write_r+0x1e>
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	bd38      	pop	{r3, r4, r5, pc}
 8001330:	200000e8 	.word	0x200000e8

08001334 <_close_r>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	4d06      	ldr	r5, [pc, #24]	; (8001350 <_close_r+0x1c>)
 8001338:	2300      	movs	r3, #0
 800133a:	4604      	mov	r4, r0
 800133c:	4608      	mov	r0, r1
 800133e:	602b      	str	r3, [r5, #0]
 8001340:	f7ff fa9f 	bl	8000882 <_close>
 8001344:	1c43      	adds	r3, r0, #1
 8001346:	d102      	bne.n	800134e <_close_r+0x1a>
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	b103      	cbz	r3, 800134e <_close_r+0x1a>
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	bd38      	pop	{r3, r4, r5, pc}
 8001350:	200000e8 	.word	0x200000e8

08001354 <_fstat_r>:
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4d07      	ldr	r5, [pc, #28]	; (8001374 <_fstat_r+0x20>)
 8001358:	2300      	movs	r3, #0
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	4611      	mov	r1, r2
 8001360:	602b      	str	r3, [r5, #0]
 8001362:	f7ff fa99 	bl	8000898 <_fstat>
 8001366:	1c43      	adds	r3, r0, #1
 8001368:	d102      	bne.n	8001370 <_fstat_r+0x1c>
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	b103      	cbz	r3, 8001370 <_fstat_r+0x1c>
 800136e:	6023      	str	r3, [r4, #0]
 8001370:	bd38      	pop	{r3, r4, r5, pc}
 8001372:	bf00      	nop
 8001374:	200000e8 	.word	0x200000e8

08001378 <_isatty_r>:
 8001378:	b538      	push	{r3, r4, r5, lr}
 800137a:	4d06      	ldr	r5, [pc, #24]	; (8001394 <_isatty_r+0x1c>)
 800137c:	2300      	movs	r3, #0
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	602b      	str	r3, [r5, #0]
 8001384:	f7ff fa97 	bl	80008b6 <_isatty>
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	d102      	bne.n	8001392 <_isatty_r+0x1a>
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	b103      	cbz	r3, 8001392 <_isatty_r+0x1a>
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	200000e8 	.word	0x200000e8

08001398 <_lseek_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4d07      	ldr	r5, [pc, #28]	; (80013b8 <_lseek_r+0x20>)
 800139c:	4604      	mov	r4, r0
 800139e:	4608      	mov	r0, r1
 80013a0:	4611      	mov	r1, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	602a      	str	r2, [r5, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f7ff fa8f 	bl	80008ca <_lseek>
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	d102      	bne.n	80013b6 <_lseek_r+0x1e>
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	b103      	cbz	r3, 80013b6 <_lseek_r+0x1e>
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
 80013b8:	200000e8 	.word	0x200000e8

080013bc <__malloc_lock>:
 80013bc:	4801      	ldr	r0, [pc, #4]	; (80013c4 <__malloc_lock+0x8>)
 80013be:	f7ff be0d 	b.w	8000fdc <__retarget_lock_acquire_recursive>
 80013c2:	bf00      	nop
 80013c4:	200000dc 	.word	0x200000dc

080013c8 <__malloc_unlock>:
 80013c8:	4801      	ldr	r0, [pc, #4]	; (80013d0 <__malloc_unlock+0x8>)
 80013ca:	f7ff be08 	b.w	8000fde <__retarget_lock_release_recursive>
 80013ce:	bf00      	nop
 80013d0:	200000dc 	.word	0x200000dc

080013d4 <_read_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	4d07      	ldr	r5, [pc, #28]	; (80013f4 <_read_r+0x20>)
 80013d8:	4604      	mov	r4, r0
 80013da:	4608      	mov	r0, r1
 80013dc:	4611      	mov	r1, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	602a      	str	r2, [r5, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f7ff fa14 	bl	8000810 <_read>
 80013e8:	1c43      	adds	r3, r0, #1
 80013ea:	d102      	bne.n	80013f2 <_read_r+0x1e>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b103      	cbz	r3, 80013f2 <_read_r+0x1e>
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	200000e8 	.word	0x200000e8

080013f8 <_init>:
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fa:	bf00      	nop
 80013fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fe:	bc08      	pop	{r3}
 8001400:	469e      	mov	lr, r3
 8001402:	4770      	bx	lr

08001404 <_fini>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	bf00      	nop
 8001408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140a:	bc08      	pop	{r3}
 800140c:	469e      	mov	lr, r3
 800140e:	4770      	bx	lr
